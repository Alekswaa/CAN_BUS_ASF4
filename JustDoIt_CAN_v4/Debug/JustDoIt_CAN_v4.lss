
JustDoIt_CAN_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002698  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000008c  20400000  00402698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000270  2040008c  00402724  0002008c  2**2
                  ALLOC
  3 .heap         00000204  204002fc  00402994  0002008c  2**0
                  ALLOC
  4 .stack        00000400  20400500  00402b98  0002008c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
  7 .debug_info   000134e4  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d52  00000000  00000000  000335f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004dc8  00000000  00000000  00036349  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000780  00000000  00000000  0003b111  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000620  00000000  00000000  0003b891  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000404b0  00000000  00000000  0003beb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000129ee  00000000  00000000  0007c361  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00146d22  00000000  00000000  0008ed4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001928  00000000  00000000  001d5a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	00 09 40 20 ed 01 40 00 e9 01 40 00 e9 01 40 00     ..@ ..@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40003c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 e9 01 40 00 00 00 00 00 e9 01 40 00     ..@...@.......@.
  40006c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	65 0f 40 00 e9 01 40 00 79 0f 40 00 e9 01 40 00     e.@...@.y.@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ec:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000fc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40010c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ......@...@...@.
  40012c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40013c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40014c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40015c:	e9 01 40 00 e9 01 40 00 e9 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	2040008c 	.word	0x2040008c
  400184:	00000000 	.word	0x00000000
  400188:	00402698 	.word	0x00402698

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00402698 	.word	0x00402698
  4001c8:	20400090 	.word	0x20400090
  4001cc:	00402698 	.word	0x00402698
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b02      	ldr	r3, [pc, #8]	; (4001e0 <atmel_start_init+0xc>)
  4001d8:	4798      	blx	r3
	stdio_redirect_init();
  4001da:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <atmel_start_init+0x10>)
  4001dc:	4798      	blx	r3
  4001de:	bd08      	pop	{r3, pc}
  4001e0:	004003d1 	.word	0x004003d1
  4001e4:	00401465 	.word	0x00401465

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	e7fe      	b.n	4001e8 <Dummy_Handler>
	...

004001ec <Reset_Handler>:
{
  4001ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <Reset_Handler+0x44>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <Reset_Handler+0x48>)
  4001f2:	429a      	cmp	r2, r3
  4001f4:	d009      	beq.n	40020a <Reset_Handler+0x1e>
  4001f6:	4b0e      	ldr	r3, [pc, #56]	; (400230 <Reset_Handler+0x44>)
  4001f8:	4a0e      	ldr	r2, [pc, #56]	; (400234 <Reset_Handler+0x48>)
  4001fa:	e003      	b.n	400204 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001fc:	6811      	ldr	r1, [r2, #0]
  4001fe:	6019      	str	r1, [r3, #0]
  400200:	3304      	adds	r3, #4
  400202:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400204:	490c      	ldr	r1, [pc, #48]	; (400238 <Reset_Handler+0x4c>)
  400206:	428b      	cmp	r3, r1
  400208:	d3f8      	bcc.n	4001fc <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <Reset_Handler+0x50>)
  40020c:	e002      	b.n	400214 <Reset_Handler+0x28>
                *pDest++ = 0;
  40020e:	2200      	movs	r2, #0
  400210:	601a      	str	r2, [r3, #0]
  400212:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4a0a      	ldr	r2, [pc, #40]	; (400240 <Reset_Handler+0x54>)
  400216:	4293      	cmp	r3, r2
  400218:	d3f9      	bcc.n	40020e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40021a:	4a0a      	ldr	r2, [pc, #40]	; (400244 <Reset_Handler+0x58>)
  40021c:	4b0a      	ldr	r3, [pc, #40]	; (400248 <Reset_Handler+0x5c>)
  40021e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400222:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400224:	4b09      	ldr	r3, [pc, #36]	; (40024c <Reset_Handler+0x60>)
  400226:	4798      	blx	r3
        main();
  400228:	4b09      	ldr	r3, [pc, #36]	; (400250 <Reset_Handler+0x64>)
  40022a:	4798      	blx	r3
  40022c:	e7fe      	b.n	40022c <Reset_Handler+0x40>
  40022e:	bf00      	nop
  400230:	20400000 	.word	0x20400000
  400234:	00402698 	.word	0x00402698
  400238:	2040008c 	.word	0x2040008c
  40023c:	2040008c 	.word	0x2040008c
  400240:	204002fc 	.word	0x204002fc
  400244:	e000ed00 	.word	0xe000ed00
  400248:	00400000 	.word	0x00400000
  40024c:	00401485 	.word	0x00401485
  400250:	004012fd 	.word	0x004012fd

00400254 <delay_driver_init>:
struct can_async_descriptor CAN_1;

struct usart_sync_descriptor TARGET_IO;

void delay_driver_init(void)
{
  400254:	b508      	push	{r3, lr}
	delay_init(SysTick);
  400256:	4802      	ldr	r0, [pc, #8]	; (400260 <delay_driver_init+0xc>)
  400258:	4b02      	ldr	r3, [pc, #8]	; (400264 <delay_driver_init+0x10>)
  40025a:	4798      	blx	r3
  40025c:	bd08      	pop	{r3, pc}
  40025e:	bf00      	nop
  400260:	e000e010 	.word	0xe000e010
  400264:	004007c5 	.word	0x004007c5

00400268 <TARGET_IO_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400268:	4b0a      	ldr	r3, [pc, #40]	; (400294 <TARGET_IO_PORT_init+0x2c>)
  40026a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40026c:	f022 0220 	bic.w	r2, r2, #32
  400270:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400272:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400274:	f042 0220 	orr.w	r2, r2, #32
  400278:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40027a:	2220      	movs	r2, #32
  40027c:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40027e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  400284:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400286:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40028c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40028e:	2240      	movs	r2, #64	; 0x40
  400290:	605a      	str	r2, [r3, #4]
  400292:	4770      	bx	lr
  400294:	400e0e00 	.word	0x400e0e00

00400298 <TARGET_IO_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400298:	4b04      	ldr	r3, [pc, #16]	; (4002ac <TARGET_IO_CLOCK_init+0x14>)
  40029a:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40029c:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002a0:	d103      	bne.n	4002aa <TARGET_IO_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002a2:	f44f 7280 	mov.w	r2, #256	; 0x100
  4002a6:	4b01      	ldr	r3, [pc, #4]	; (4002ac <TARGET_IO_CLOCK_init+0x14>)
  4002a8:	611a      	str	r2, [r3, #16]
  4002aa:	4770      	bx	lr
  4002ac:	400e0600 	.word	0x400e0600

004002b0 <TARGET_IO_init>:
{
	_pmc_enable_periph_clock(ID_UART1);
}

void TARGET_IO_init(void)
{
  4002b0:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
  4002b2:	4b06      	ldr	r3, [pc, #24]	; (4002cc <TARGET_IO_init+0x1c>)
  4002b4:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, UART1, _uart_get_usart_sync());
  4002b6:	4b06      	ldr	r3, [pc, #24]	; (4002d0 <TARGET_IO_init+0x20>)
  4002b8:	4798      	blx	r3
  4002ba:	4602      	mov	r2, r0
  4002bc:	4905      	ldr	r1, [pc, #20]	; (4002d4 <TARGET_IO_init+0x24>)
  4002be:	4806      	ldr	r0, [pc, #24]	; (4002d8 <TARGET_IO_init+0x28>)
  4002c0:	4b06      	ldr	r3, [pc, #24]	; (4002dc <TARGET_IO_init+0x2c>)
  4002c2:	4798      	blx	r3
	TARGET_IO_PORT_init();
  4002c4:	4b06      	ldr	r3, [pc, #24]	; (4002e0 <TARGET_IO_init+0x30>)
  4002c6:	4798      	blx	r3
  4002c8:	bd08      	pop	{r3, pc}
  4002ca:	bf00      	nop
  4002cc:	00400299 	.word	0x00400299
  4002d0:	004012f9 	.word	0x004012f9
  4002d4:	400e0a00 	.word	0x400e0a00
  4002d8:	20400144 	.word	0x20400144
  4002dc:	00400929 	.word	0x00400929
  4002e0:	00400269 	.word	0x00400269

004002e4 <CAN_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4002e4:	4b05      	ldr	r3, [pc, #20]	; (4002fc <CAN_0_CLOCK_init+0x18>)
  4002e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4002ea:	f013 0f08 	tst.w	r3, #8
  4002ee:	d103      	bne.n	4002f8 <CAN_0_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  4002f0:	2208      	movs	r2, #8
  4002f2:	4b02      	ldr	r3, [pc, #8]	; (4002fc <CAN_0_CLOCK_init+0x18>)
  4002f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  4002f8:	4770      	bx	lr
  4002fa:	bf00      	nop
  4002fc:	400e0600 	.word	0x400e0600

00400300 <CAN_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400300:	4b0a      	ldr	r3, [pc, #40]	; (40032c <CAN_0_PORT_init+0x2c>)
  400302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400304:	f022 0208 	bic.w	r2, r2, #8
  400308:	671a      	str	r2, [r3, #112]	; 0x70
  40030a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40030c:	f022 0208 	bic.w	r2, r2, #8
  400310:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400312:	2208      	movs	r2, #8
  400314:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400318:	f022 0204 	bic.w	r2, r2, #4
  40031c:	671a      	str	r2, [r3, #112]	; 0x70
  40031e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400320:	f022 0204 	bic.w	r2, r2, #4
  400324:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400326:	2204      	movs	r2, #4
  400328:	605a      	str	r2, [r3, #4]
  40032a:	4770      	bx	lr
  40032c:	400e1000 	.word	0x400e1000

00400330 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
  400330:	b508      	push	{r3, lr}
	CAN_0_CLOCK_init();
  400332:	4b04      	ldr	r3, [pc, #16]	; (400344 <CAN_0_init+0x14>)
  400334:	4798      	blx	r3
	CAN_0_PORT_init();
  400336:	4b04      	ldr	r3, [pc, #16]	; (400348 <CAN_0_init+0x18>)
  400338:	4798      	blx	r3
	can_async_init(&CAN_0, MCAN0);
  40033a:	4904      	ldr	r1, [pc, #16]	; (40034c <CAN_0_init+0x1c>)
  40033c:	4804      	ldr	r0, [pc, #16]	; (400350 <CAN_0_init+0x20>)
  40033e:	4b05      	ldr	r3, [pc, #20]	; (400354 <CAN_0_init+0x24>)
  400340:	4798      	blx	r3
  400342:	bd08      	pop	{r3, pc}
  400344:	004002e5 	.word	0x004002e5
  400348:	00400301 	.word	0x00400301
  40034c:	40030000 	.word	0x40030000
  400350:	2040011c 	.word	0x2040011c
  400354:	00400669 	.word	0x00400669

00400358 <CAN_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400358:	4b05      	ldr	r3, [pc, #20]	; (400370 <CAN_1_CLOCK_init+0x18>)
  40035a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  40035e:	f013 0f20 	tst.w	r3, #32
  400362:	d103      	bne.n	40036c <CAN_1_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400364:	2220      	movs	r2, #32
  400366:	4b02      	ldr	r3, [pc, #8]	; (400370 <CAN_1_CLOCK_init+0x18>)
  400368:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40036c:	4770      	bx	lr
  40036e:	bf00      	nop
  400370:	400e0600 	.word	0x400e0600

00400374 <CAN_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400374:	4b0b      	ldr	r3, [pc, #44]	; (4003a4 <CAN_1_PORT_init+0x30>)
  400376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400378:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40037c:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40037e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400380:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400384:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40038a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40038c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40038e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
  400392:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400394:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40039a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40039c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4003a0:	605a      	str	r2, [r3, #4]
  4003a2:	4770      	bx	lr
  4003a4:	400e1200 	.word	0x400e1200

004003a8 <CAN_1_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_1_init(void)
{
  4003a8:	b508      	push	{r3, lr}
	CAN_1_CLOCK_init();
  4003aa:	4b04      	ldr	r3, [pc, #16]	; (4003bc <CAN_1_init+0x14>)
  4003ac:	4798      	blx	r3
	CAN_1_PORT_init();
  4003ae:	4b04      	ldr	r3, [pc, #16]	; (4003c0 <CAN_1_init+0x18>)
  4003b0:	4798      	blx	r3
	can_async_init(&CAN_1, MCAN1);
  4003b2:	4904      	ldr	r1, [pc, #16]	; (4003c4 <CAN_1_init+0x1c>)
  4003b4:	4804      	ldr	r0, [pc, #16]	; (4003c8 <CAN_1_init+0x20>)
  4003b6:	4b05      	ldr	r3, [pc, #20]	; (4003cc <CAN_1_init+0x24>)
  4003b8:	4798      	blx	r3
  4003ba:	bd08      	pop	{r3, pc}
  4003bc:	00400359 	.word	0x00400359
  4003c0:	00400375 	.word	0x00400375
  4003c4:	40034000 	.word	0x40034000
  4003c8:	20400150 	.word	0x20400150
  4003cc:	00400669 	.word	0x00400669

004003d0 <system_init>:
}

void system_init(void)
{
  4003d0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4003d2:	4b11      	ldr	r3, [pc, #68]	; (400418 <system_init+0x48>)
  4003d4:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003d6:	4b11      	ldr	r3, [pc, #68]	; (40041c <system_init+0x4c>)
  4003d8:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4003da:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4003de:	d103      	bne.n	4003e8 <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003e4:	4b0d      	ldr	r3, [pc, #52]	; (40041c <system_init+0x4c>)
  4003e6:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4003e8:	4a0d      	ldr	r2, [pc, #52]	; (400420 <system_init+0x50>)
  4003ea:	6853      	ldr	r3, [r2, #4]
  4003ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4003f0:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_CODR = mask;
  4003f2:	4b0c      	ldr	r3, [pc, #48]	; (400424 <system_init+0x54>)
  4003f4:	2201      	movs	r2, #1
  4003f6:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  4003f8:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  4003fa:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4003fc:	2202      	movs	r2, #2
  4003fe:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_OER = mask;
  400400:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_PER = mask;
  400402:	601a      	str	r2, [r3, #0]
	// Set pin direction to output
	gpio_set_pin_direction(silen1, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(silen1, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
  400404:	4b08      	ldr	r3, [pc, #32]	; (400428 <system_init+0x58>)
  400406:	4798      	blx	r3

	TARGET_IO_init();
  400408:	4b08      	ldr	r3, [pc, #32]	; (40042c <system_init+0x5c>)
  40040a:	4798      	blx	r3

	CAN_0_init();
  40040c:	4b08      	ldr	r3, [pc, #32]	; (400430 <system_init+0x60>)
  40040e:	4798      	blx	r3
	CAN_1_init();
  400410:	4b08      	ldr	r3, [pc, #32]	; (400434 <system_init+0x64>)
  400412:	4798      	blx	r3
  400414:	bd08      	pop	{r3, pc}
  400416:	bf00      	nop
  400418:	004009f5 	.word	0x004009f5
  40041c:	400e0600 	.word	0x400e0600
  400420:	400e1850 	.word	0x400e1850
  400424:	400e1000 	.word	0x400e1000
  400428:	00400255 	.word	0x00400255
  40042c:	004002b1 	.word	0x004002b1
  400430:	00400331 	.word	0x00400331
  400434:	004003a9 	.word	0x004003a9

00400438 <CAN_0_tx_callback>:

	io_write(io, (uint8_t *)"Hello World!", 12);
}

void CAN_0_tx_callback(struct can_async_descriptor *const descr)
{
  400438:	4770      	bx	lr

0040043a <CAN_1_tx_callback>:
	filter.mask = 0;
	can_async_set_filter(&CAN_0, 1, CAN_FMT_EXTID, &filter);
}

void CAN_1_tx_callback(struct can_async_descriptor *const descr)
{
  40043a:	4770      	bx	lr

0040043c <CAN_0_rx_callback>:
{
  40043c:	b510      	push	{r4, lr}
  40043e:	b096      	sub	sp, #88	; 0x58
	msg.data = data;
  400440:	ab02      	add	r3, sp, #8
  400442:	9314      	str	r3, [sp, #80]	; 0x50
	can_async_read(descr, &msg);
  400444:	a912      	add	r1, sp, #72	; 0x48
  400446:	4b06      	ldr	r3, [pc, #24]	; (400460 <CAN_0_rx_callback+0x24>)
  400448:	4798      	blx	r3
	printf("Message received CAN0: %d %d %d %d\n", msg.data[0], msg.data[1], msg.data[2], msg.data[3]);
  40044a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40044c:	7801      	ldrb	r1, [r0, #0]
  40044e:	7842      	ldrb	r2, [r0, #1]
  400450:	7883      	ldrb	r3, [r0, #2]
  400452:	78c0      	ldrb	r0, [r0, #3]
  400454:	9000      	str	r0, [sp, #0]
  400456:	4803      	ldr	r0, [pc, #12]	; (400464 <CAN_0_rx_callback+0x28>)
  400458:	4c03      	ldr	r4, [pc, #12]	; (400468 <CAN_0_rx_callback+0x2c>)
  40045a:	47a0      	blx	r4
}
  40045c:	b016      	add	sp, #88	; 0x58
  40045e:	bd10      	pop	{r4, pc}
  400460:	004006e1 	.word	0x004006e1
  400464:	00402508 	.word	0x00402508
  400468:	004014f5 	.word	0x004014f5

0040046c <CAN_1_rx_callback>:
	(void)descr;
}
void CAN_1_rx_callback(struct can_async_descriptor *const descr)
{
  40046c:	b510      	push	{r4, lr}
  40046e:	b096      	sub	sp, #88	; 0x58
	struct can_message msg;
	uint8_t            data[64];
	msg.data = data;
  400470:	ab02      	add	r3, sp, #8
  400472:	9314      	str	r3, [sp, #80]	; 0x50
	can_async_read(descr, &msg);
  400474:	a912      	add	r1, sp, #72	; 0x48
  400476:	4b06      	ldr	r3, [pc, #24]	; (400490 <CAN_1_rx_callback+0x24>)
  400478:	4798      	blx	r3
	printf("Message received CAN1: %d %d %d %d\n", msg.data[0], msg.data[1], msg.data[2], msg.data[3]);
  40047a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40047c:	7801      	ldrb	r1, [r0, #0]
  40047e:	7842      	ldrb	r2, [r0, #1]
  400480:	7883      	ldrb	r3, [r0, #2]
  400482:	78c0      	ldrb	r0, [r0, #3]
  400484:	9000      	str	r0, [sp, #0]
  400486:	4803      	ldr	r0, [pc, #12]	; (400494 <CAN_1_rx_callback+0x28>)
  400488:	4c03      	ldr	r4, [pc, #12]	; (400498 <CAN_1_rx_callback+0x2c>)
  40048a:	47a0      	blx	r4
	return;
}
  40048c:	b016      	add	sp, #88	; 0x58
  40048e:	bd10      	pop	{r4, pc}
  400490:	004006e1 	.word	0x004006e1
  400494:	0040252c 	.word	0x0040252c
  400498:	004014f5 	.word	0x004014f5

0040049c <CAN_0_example>:
{
  40049c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004a0:	b088      	sub	sp, #32
	send_data[0] = inc_num;
  4004a2:	4a27      	ldr	r2, [pc, #156]	; (400540 <CAN_0_example+0xa4>)
  4004a4:	7813      	ldrb	r3, [r2, #0]
  4004a6:	f88d 3004 	strb.w	r3, [sp, #4]
	send_data[1] = inc_num+50;
  4004aa:	f103 0132 	add.w	r1, r3, #50	; 0x32
  4004ae:	f88d 1005 	strb.w	r1, [sp, #5]
	send_data[2] = inc_num+100;
  4004b2:	f103 0164 	add.w	r1, r3, #100	; 0x64
  4004b6:	f88d 1006 	strb.w	r1, [sp, #6]
	send_data[3] = inc_num+150;
  4004ba:	f1a3 016a 	sub.w	r1, r3, #106	; 0x6a
  4004be:	f88d 1007 	strb.w	r1, [sp, #7]
	inc_num++;
  4004c2:	3301      	adds	r3, #1
  4004c4:	7013      	strb	r3, [r2, #0]
	msg.id   = 0x45A;
  4004c6:	f240 435a 	movw	r3, #1114	; 0x45a
  4004ca:	9304      	str	r3, [sp, #16]
	msg.type = CAN_TYPE_DATA;
  4004cc:	2500      	movs	r5, #0
  4004ce:	f88d 5014 	strb.w	r5, [sp, #20]
	msg.data = send_data;
  4004d2:	ab01      	add	r3, sp, #4
  4004d4:	9306      	str	r3, [sp, #24]
	msg.len  = 4;
  4004d6:	2304      	movs	r3, #4
  4004d8:	f88d 301c 	strb.w	r3, [sp, #28]
	msg.fmt  = CAN_FMT_STDID;
  4004dc:	f88d 501d 	strb.w	r5, [sp, #29]
	can_async_register_callback(&CAN_0, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_0_tx_callback);
  4004e0:	4c18      	ldr	r4, [pc, #96]	; (400544 <CAN_0_example+0xa8>)
  4004e2:	4a19      	ldr	r2, [pc, #100]	; (400548 <CAN_0_example+0xac>)
  4004e4:	2101      	movs	r1, #1
  4004e6:	4620      	mov	r0, r4
  4004e8:	4f18      	ldr	r7, [pc, #96]	; (40054c <CAN_0_example+0xb0>)
  4004ea:	47b8      	blx	r7
	can_async_enable(&CAN_0);
  4004ec:	4620      	mov	r0, r4
  4004ee:	4b18      	ldr	r3, [pc, #96]	; (400550 <CAN_0_example+0xb4>)
  4004f0:	4798      	blx	r3
	can_async_write(&CAN_0, &msg);
  4004f2:	a904      	add	r1, sp, #16
  4004f4:	4620      	mov	r0, r4
  4004f6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 400564 <CAN_0_example+0xc8>
  4004fa:	47c0      	blx	r8
	msg.id  = 0x100000A5;
  4004fc:	4b15      	ldr	r3, [pc, #84]	; (400554 <CAN_0_example+0xb8>)
  4004fe:	9304      	str	r3, [sp, #16]
	msg.fmt = CAN_FMT_EXTID;
  400500:	2601      	movs	r6, #1
  400502:	f88d 601d 	strb.w	r6, [sp, #29]
	can_async_write(&CAN_0, &msg);
  400506:	a904      	add	r1, sp, #16
  400508:	4620      	mov	r0, r4
  40050a:	47c0      	blx	r8
	can_async_register_callback(&CAN_0, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_0_rx_callback);
  40050c:	4a12      	ldr	r2, [pc, #72]	; (400558 <CAN_0_example+0xbc>)
  40050e:	4629      	mov	r1, r5
  400510:	4620      	mov	r0, r4
  400512:	47b8      	blx	r7
	filter.id   = 0x469;
  400514:	f240 4369 	movw	r3, #1129	; 0x469
  400518:	9302      	str	r3, [sp, #8]
	filter.mask = 0;
  40051a:	9503      	str	r5, [sp, #12]
	can_async_set_filter(&CAN_0, 0, CAN_FMT_STDID, &filter);
  40051c:	ab02      	add	r3, sp, #8
  40051e:	462a      	mov	r2, r5
  400520:	4629      	mov	r1, r5
  400522:	4620      	mov	r0, r4
  400524:	4f0d      	ldr	r7, [pc, #52]	; (40055c <CAN_0_example+0xc0>)
  400526:	47b8      	blx	r7
	filter.id   = 0x10000096;
  400528:	4b0d      	ldr	r3, [pc, #52]	; (400560 <CAN_0_example+0xc4>)
  40052a:	9302      	str	r3, [sp, #8]
	filter.mask = 0;
  40052c:	9503      	str	r5, [sp, #12]
	can_async_set_filter(&CAN_0, 1, CAN_FMT_EXTID, &filter);
  40052e:	ab02      	add	r3, sp, #8
  400530:	4632      	mov	r2, r6
  400532:	4631      	mov	r1, r6
  400534:	4620      	mov	r0, r4
  400536:	47b8      	blx	r7
}
  400538:	b008      	add	sp, #32
  40053a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40053e:	bf00      	nop
  400540:	204000a8 	.word	0x204000a8
  400544:	2040011c 	.word	0x2040011c
  400548:	00400439 	.word	0x00400439
  40054c:	00400741 	.word	0x00400741
  400550:	004006b9 	.word	0x004006b9
  400554:	100000a5 	.word	0x100000a5
  400558:	0040043d 	.word	0x0040043d
  40055c:	00400791 	.word	0x00400791
  400560:	10000096 	.word	0x10000096
  400564:	00400711 	.word	0x00400711

00400568 <CAN_1_example>:

/**
 * Example of using CAN_1 to Encrypt/Decrypt datas.
 */
void CAN_1_example(void)
{
  400568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40056c:	b088      	sub	sp, #32
	struct can_message msg;
	struct can_filter  filter;
	uint8_t            send_data[4];
	static uint8_t inc_num = 0;
	send_data[0] = inc_num;
  40056e:	4a26      	ldr	r2, [pc, #152]	; (400608 <CAN_1_example+0xa0>)
  400570:	7853      	ldrb	r3, [r2, #1]
  400572:	f88d 3004 	strb.w	r3, [sp, #4]
	send_data[1] = inc_num+5;
  400576:	1d59      	adds	r1, r3, #5
  400578:	f88d 1005 	strb.w	r1, [sp, #5]
	send_data[2] = inc_num+10;
  40057c:	f103 010a 	add.w	r1, r3, #10
  400580:	f88d 1006 	strb.w	r1, [sp, #6]
	send_data[3] = inc_num+15;
  400584:	f103 010f 	add.w	r1, r3, #15
  400588:	f88d 1007 	strb.w	r1, [sp, #7]
	inc_num++;
  40058c:	3301      	adds	r3, #1
  40058e:	7053      	strb	r3, [r2, #1]

	msg.id   = 0x45A;
  400590:	f240 435a 	movw	r3, #1114	; 0x45a
  400594:	9304      	str	r3, [sp, #16]
	msg.type = CAN_TYPE_DATA;
  400596:	2500      	movs	r5, #0
  400598:	f88d 5014 	strb.w	r5, [sp, #20]
	msg.data = send_data;
  40059c:	ab01      	add	r3, sp, #4
  40059e:	9306      	str	r3, [sp, #24]
	msg.len  = 4;
  4005a0:	2304      	movs	r3, #4
  4005a2:	f88d 301c 	strb.w	r3, [sp, #28]
	msg.fmt  = CAN_FMT_STDID;
  4005a6:	f88d 501d 	strb.w	r5, [sp, #29]
	can_async_register_callback(&CAN_1, CAN_ASYNC_TX_CB, (FUNC_PTR)CAN_1_tx_callback);
  4005aa:	4c18      	ldr	r4, [pc, #96]	; (40060c <CAN_1_example+0xa4>)
  4005ac:	4a18      	ldr	r2, [pc, #96]	; (400610 <CAN_1_example+0xa8>)
  4005ae:	2101      	movs	r1, #1
  4005b0:	4620      	mov	r0, r4
  4005b2:	4f18      	ldr	r7, [pc, #96]	; (400614 <CAN_1_example+0xac>)
  4005b4:	47b8      	blx	r7
	can_async_enable(&CAN_1);
  4005b6:	4620      	mov	r0, r4
  4005b8:	4b17      	ldr	r3, [pc, #92]	; (400618 <CAN_1_example+0xb0>)
  4005ba:	4798      	blx	r3
	/**
	 * CAN_1_tx_callback callback should be invoked after call
	 * can_async_write, and remote device should recieve message with ID=0x45A
	 */
	can_async_write(&CAN_1, &msg);
  4005bc:	a904      	add	r1, sp, #16
  4005be:	4620      	mov	r0, r4
  4005c0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 40062c <CAN_1_example+0xc4>
  4005c4:	47c0      	blx	r8

	msg.id  = 0x100000A5;
  4005c6:	4b15      	ldr	r3, [pc, #84]	; (40061c <CAN_1_example+0xb4>)
  4005c8:	9304      	str	r3, [sp, #16]
	msg.fmt = CAN_FMT_EXTID;
  4005ca:	2601      	movs	r6, #1
  4005cc:	f88d 601d 	strb.w	r6, [sp, #29]
	/**
	 * remote device should recieve message with ID=0x100000A5
	 */
	can_async_write(&CAN_1, &msg);
  4005d0:	a904      	add	r1, sp, #16
  4005d2:	4620      	mov	r0, r4
  4005d4:	47c0      	blx	r8
	/**
	 * CAN_1_rx_callback callback should be invoked after call
	 * can_async_set_filter and remote device send CAN Message with the same
	 * content as the filter.
	 */
	can_async_register_callback(&CAN_1, CAN_ASYNC_RX_CB, (FUNC_PTR)CAN_1_rx_callback);
  4005d6:	4a12      	ldr	r2, [pc, #72]	; (400620 <CAN_1_example+0xb8>)
  4005d8:	4629      	mov	r1, r5
  4005da:	4620      	mov	r0, r4
  4005dc:	47b8      	blx	r7
	filter.id   = 0x469;
  4005de:	f240 4369 	movw	r3, #1129	; 0x469
  4005e2:	9302      	str	r3, [sp, #8]
	filter.mask = 0;
  4005e4:	9503      	str	r5, [sp, #12]
	can_async_set_filter(&CAN_1, 0, CAN_FMT_STDID, &filter);
  4005e6:	ab02      	add	r3, sp, #8
  4005e8:	462a      	mov	r2, r5
  4005ea:	4629      	mov	r1, r5
  4005ec:	4620      	mov	r0, r4
  4005ee:	4f0d      	ldr	r7, [pc, #52]	; (400624 <CAN_1_example+0xbc>)
  4005f0:	47b8      	blx	r7

	filter.id   = 0x10000096;
  4005f2:	4b0d      	ldr	r3, [pc, #52]	; (400628 <CAN_1_example+0xc0>)
  4005f4:	9302      	str	r3, [sp, #8]
	filter.mask = 0;
  4005f6:	9503      	str	r5, [sp, #12]
	can_async_set_filter(&CAN_1, 1, CAN_FMT_EXTID, &filter);
  4005f8:	ab02      	add	r3, sp, #8
  4005fa:	4632      	mov	r2, r6
  4005fc:	4631      	mov	r1, r6
  4005fe:	4620      	mov	r0, r4
  400600:	47b8      	blx	r7
}
  400602:	b008      	add	sp, #32
  400604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400608:	204000a8 	.word	0x204000a8
  40060c:	20400150 	.word	0x20400150
  400610:	0040043b 	.word	0x0040043b
  400614:	00400741 	.word	0x00400741
  400618:	004006b9 	.word	0x004006b9
  40061c:	100000a5 	.word	0x100000a5
  400620:	0040046d 	.word	0x0040046d
  400624:	00400791 	.word	0x00400791
  400628:	10000096 	.word	0x10000096
  40062c:	00400711 	.word	0x00400711

00400630 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400630:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400634:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400636:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400638:	f3bf 8f5f 	dmb	sy
  40063c:	4770      	bx	lr

0040063e <atomic_leave_critical>:
  40063e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400642:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400644:	f383 8810 	msr	PRIMASK, r3
  400648:	4770      	bx	lr

0040064a <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
  40064a:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
  40064c:	69c3      	ldr	r3, [r0, #28]
  40064e:	b103      	cbz	r3, 400652 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
  400650:	4798      	blx	r3
  400652:	bd08      	pop	{r3, pc}

00400654 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
  400654:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
  400656:	6a03      	ldr	r3, [r0, #32]
  400658:	b103      	cbz	r3, 40065c <can_rx_done+0x8>
		descr->cb.rx_done(descr);
  40065a:	4798      	blx	r3
  40065c:	bd08      	pop	{r3, pc}

0040065e <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
  40065e:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
  400660:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400662:	b103      	cbz	r3, 400666 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
  400664:	4798      	blx	r3
  400666:	bd08      	pop	{r3, pc}

00400668 <can_async_init>:
{
  400668:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40066a:	4604      	mov	r4, r0
  40066c:	460d      	mov	r5, r1
  40066e:	2800      	cmp	r0, #0
  400670:	bf18      	it	ne
  400672:	2900      	cmpne	r1, #0
  400674:	bf14      	ite	ne
  400676:	2001      	movne	r0, #1
  400678:	2000      	moveq	r0, #0
  40067a:	2241      	movs	r2, #65	; 0x41
  40067c:	4908      	ldr	r1, [pc, #32]	; (4006a0 <can_async_init+0x38>)
  40067e:	4b09      	ldr	r3, [pc, #36]	; (4006a4 <can_async_init+0x3c>)
  400680:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
  400682:	4629      	mov	r1, r5
  400684:	4620      	mov	r0, r4
  400686:	4b08      	ldr	r3, [pc, #32]	; (4006a8 <can_async_init+0x40>)
  400688:	4798      	blx	r3
	if (rc) {
  40068a:	4603      	mov	r3, r0
  40068c:	b928      	cbnz	r0, 40069a <can_async_init+0x32>
	descr->dev.cb.tx_done     = can_tx_done;
  40068e:	4a07      	ldr	r2, [pc, #28]	; (4006ac <can_async_init+0x44>)
  400690:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
  400692:	4a07      	ldr	r2, [pc, #28]	; (4006b0 <can_async_init+0x48>)
  400694:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
  400696:	4a07      	ldr	r2, [pc, #28]	; (4006b4 <can_async_init+0x4c>)
  400698:	60e2      	str	r2, [r4, #12]
}
  40069a:	4618      	mov	r0, r3
  40069c:	bd38      	pop	{r3, r4, r5, pc}
  40069e:	bf00      	nop
  4006a0:	00402560 	.word	0x00402560
  4006a4:	0040099d 	.word	0x0040099d
  4006a8:	00400abd 	.word	0x00400abd
  4006ac:	0040064b 	.word	0x0040064b
  4006b0:	00400655 	.word	0x00400655
  4006b4:	0040065f 	.word	0x0040065f

004006b8 <can_async_enable>:
{
  4006b8:	b510      	push	{r4, lr}
	ASSERT(descr);
  4006ba:	4604      	mov	r4, r0
  4006bc:	225c      	movs	r2, #92	; 0x5c
  4006be:	4905      	ldr	r1, [pc, #20]	; (4006d4 <can_async_enable+0x1c>)
  4006c0:	3000      	adds	r0, #0
  4006c2:	bf18      	it	ne
  4006c4:	2001      	movne	r0, #1
  4006c6:	4b04      	ldr	r3, [pc, #16]	; (4006d8 <can_async_enable+0x20>)
  4006c8:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
  4006ca:	4620      	mov	r0, r4
  4006cc:	4b03      	ldr	r3, [pc, #12]	; (4006dc <can_async_enable+0x24>)
  4006ce:	4798      	blx	r3
}
  4006d0:	bd10      	pop	{r4, pc}
  4006d2:	bf00      	nop
  4006d4:	00402560 	.word	0x00402560
  4006d8:	0040099d 	.word	0x0040099d
  4006dc:	00400c95 	.word	0x00400c95

004006e0 <can_async_read>:
{
  4006e0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  4006e2:	4604      	mov	r4, r0
  4006e4:	460d      	mov	r5, r1
  4006e6:	2800      	cmp	r0, #0
  4006e8:	bf18      	it	ne
  4006ea:	2900      	cmpne	r1, #0
  4006ec:	bf14      	ite	ne
  4006ee:	2001      	movne	r0, #1
  4006f0:	2000      	moveq	r0, #0
  4006f2:	226e      	movs	r2, #110	; 0x6e
  4006f4:	4903      	ldr	r1, [pc, #12]	; (400704 <can_async_read+0x24>)
  4006f6:	4b04      	ldr	r3, [pc, #16]	; (400708 <can_async_read+0x28>)
  4006f8:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
  4006fa:	4629      	mov	r1, r5
  4006fc:	4620      	mov	r0, r4
  4006fe:	4b03      	ldr	r3, [pc, #12]	; (40070c <can_async_read+0x2c>)
  400700:	4798      	blx	r3
}
  400702:	bd38      	pop	{r3, r4, r5, pc}
  400704:	00402560 	.word	0x00402560
  400708:	0040099d 	.word	0x0040099d
  40070c:	00400ca5 	.word	0x00400ca5

00400710 <can_async_write>:
{
  400710:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && msg);
  400712:	4604      	mov	r4, r0
  400714:	460d      	mov	r5, r1
  400716:	2800      	cmp	r0, #0
  400718:	bf18      	it	ne
  40071a:	2900      	cmpne	r1, #0
  40071c:	bf14      	ite	ne
  40071e:	2001      	movne	r0, #1
  400720:	2000      	moveq	r0, #0
  400722:	2277      	movs	r2, #119	; 0x77
  400724:	4903      	ldr	r1, [pc, #12]	; (400734 <can_async_write+0x24>)
  400726:	4b04      	ldr	r3, [pc, #16]	; (400738 <can_async_write+0x28>)
  400728:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
  40072a:	4629      	mov	r1, r5
  40072c:	4620      	mov	r0, r4
  40072e:	4b03      	ldr	r3, [pc, #12]	; (40073c <can_async_write+0x2c>)
  400730:	4798      	blx	r3
}
  400732:	bd38      	pop	{r3, r4, r5, pc}
  400734:	00402560 	.word	0x00402560
  400738:	0040099d 	.word	0x0040099d
  40073c:	00400d71 	.word	0x00400d71

00400740 <can_async_register_callback>:
{
  400740:	b570      	push	{r4, r5, r6, lr}
  400742:	460c      	mov	r4, r1
  400744:	4616      	mov	r6, r2
	ASSERT(descr);
  400746:	4605      	mov	r5, r0
  400748:	2281      	movs	r2, #129	; 0x81
  40074a:	490e      	ldr	r1, [pc, #56]	; (400784 <can_async_register_callback+0x44>)
  40074c:	3000      	adds	r0, #0
  40074e:	bf18      	it	ne
  400750:	2001      	movne	r0, #1
  400752:	4b0d      	ldr	r3, [pc, #52]	; (400788 <can_async_register_callback+0x48>)
  400754:	4798      	blx	r3
	switch (type) {
  400756:	2c01      	cmp	r4, #1
  400758:	d00f      	beq.n	40077a <can_async_register_callback+0x3a>
  40075a:	b124      	cbz	r4, 400766 <can_async_register_callback+0x26>
  40075c:	2c02      	cmp	r4, #2
  40075e:	d00e      	beq.n	40077e <can_async_register_callback+0x3e>
		return ERR_INVALID_ARG;
  400760:	f06f 000c 	mvn.w	r0, #12
}
  400764:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  400766:	622e      	str	r6, [r5, #32]
	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
  400768:	1c32      	adds	r2, r6, #0
  40076a:	bf18      	it	ne
  40076c:	2201      	movne	r2, #1
  40076e:	4621      	mov	r1, r4
  400770:	4628      	mov	r0, r5
  400772:	4b06      	ldr	r3, [pc, #24]	; (40078c <can_async_register_callback+0x4c>)
  400774:	4798      	blx	r3
	return ERR_NONE;
  400776:	2000      	movs	r0, #0
  400778:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
  40077a:	61ee      	str	r6, [r5, #28]
		break;
  40077c:	e7f4      	b.n	400768 <can_async_register_callback+0x28>
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
  40077e:	626e      	str	r6, [r5, #36]	; 0x24
		break;
  400780:	e7f2      	b.n	400768 <can_async_register_callback+0x28>
  400782:	bf00      	nop
  400784:	00402560 	.word	0x00402560
  400788:	0040099d 	.word	0x0040099d
  40078c:	00400ea5 	.word	0x00400ea5

00400790 <can_async_set_filter>:
{
  400790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400792:	460d      	mov	r5, r1
  400794:	4616      	mov	r6, r2
  400796:	461f      	mov	r7, r3
	ASSERT(descr);
  400798:	4604      	mov	r4, r0
  40079a:	22b8      	movs	r2, #184	; 0xb8
  40079c:	4906      	ldr	r1, [pc, #24]	; (4007b8 <can_async_set_filter+0x28>)
  40079e:	3000      	adds	r0, #0
  4007a0:	bf18      	it	ne
  4007a2:	2001      	movne	r0, #1
  4007a4:	4b05      	ldr	r3, [pc, #20]	; (4007bc <can_async_set_filter+0x2c>)
  4007a6:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
  4007a8:	463b      	mov	r3, r7
  4007aa:	4632      	mov	r2, r6
  4007ac:	4629      	mov	r1, r5
  4007ae:	4620      	mov	r0, r4
  4007b0:	4c03      	ldr	r4, [pc, #12]	; (4007c0 <can_async_set_filter+0x30>)
  4007b2:	47a0      	blx	r4
}
  4007b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007b6:	bf00      	nop
  4007b8:	00402560 	.word	0x00402560
  4007bc:	0040099d 	.word	0x0040099d
  4007c0:	00400ee9 	.word	0x00400ee9

004007c4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
  4007c4:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
  4007c6:	4b02      	ldr	r3, [pc, #8]	; (4007d0 <delay_init+0xc>)
  4007c8:	6018      	str	r0, [r3, #0]
  4007ca:	4b02      	ldr	r3, [pc, #8]	; (4007d4 <delay_init+0x10>)
  4007cc:	4798      	blx	r3
  4007ce:	bd08      	pop	{r3, pc}
  4007d0:	204000ac 	.word	0x204000ac
  4007d4:	00401079 	.word	0x00401079

004007d8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  4007d8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  4007da:	4b04      	ldr	r3, [pc, #16]	; (4007ec <delay_ms+0x14>)
  4007dc:	681c      	ldr	r4, [r3, #0]
  4007de:	4b04      	ldr	r3, [pc, #16]	; (4007f0 <delay_ms+0x18>)
  4007e0:	4798      	blx	r3
  4007e2:	4601      	mov	r1, r0
  4007e4:	4620      	mov	r0, r4
  4007e6:	4b03      	ldr	r3, [pc, #12]	; (4007f4 <delay_ms+0x1c>)
  4007e8:	4798      	blx	r3
  4007ea:	bd10      	pop	{r4, pc}
  4007ec:	204000ac 	.word	0x204000ac
  4007f0:	004009e1 	.word	0x004009e1
  4007f4:	00401085 	.word	0x00401085

004007f8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4007f8:	b570      	push	{r4, r5, r6, lr}
  4007fa:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4007fc:	4604      	mov	r4, r0
  4007fe:	460d      	mov	r5, r1
  400800:	2800      	cmp	r0, #0
  400802:	bf18      	it	ne
  400804:	2900      	cmpne	r1, #0
  400806:	bf14      	ite	ne
  400808:	2001      	movne	r0, #1
  40080a:	2000      	moveq	r0, #0
  40080c:	2234      	movs	r2, #52	; 0x34
  40080e:	4904      	ldr	r1, [pc, #16]	; (400820 <io_write+0x28>)
  400810:	4b04      	ldr	r3, [pc, #16]	; (400824 <io_write+0x2c>)
  400812:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400814:	6823      	ldr	r3, [r4, #0]
  400816:	4632      	mov	r2, r6
  400818:	4629      	mov	r1, r5
  40081a:	4620      	mov	r0, r4
  40081c:	4798      	blx	r3
}
  40081e:	bd70      	pop	{r4, r5, r6, pc}
  400820:	0040257c 	.word	0x0040257c
  400824:	0040099d 	.word	0x0040099d

00400828 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400828:	b570      	push	{r4, r5, r6, lr}
  40082a:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  40082c:	4604      	mov	r4, r0
  40082e:	460d      	mov	r5, r1
  400830:	2800      	cmp	r0, #0
  400832:	bf18      	it	ne
  400834:	2900      	cmpne	r1, #0
  400836:	bf14      	ite	ne
  400838:	2001      	movne	r0, #1
  40083a:	2000      	moveq	r0, #0
  40083c:	223d      	movs	r2, #61	; 0x3d
  40083e:	4904      	ldr	r1, [pc, #16]	; (400850 <io_read+0x28>)
  400840:	4b04      	ldr	r3, [pc, #16]	; (400854 <io_read+0x2c>)
  400842:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  400844:	6863      	ldr	r3, [r4, #4]
  400846:	4632      	mov	r2, r6
  400848:	4629      	mov	r1, r5
  40084a:	4620      	mov	r0, r4
  40084c:	4798      	blx	r3
}
  40084e:	bd70      	pop	{r4, r5, r6, pc}
  400850:	0040257c 	.word	0x0040257c
  400854:	0040099d 	.word	0x0040099d

00400858 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40085a:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  40085c:	4605      	mov	r5, r0
  40085e:	460f      	mov	r7, r1
  400860:	2800      	cmp	r0, #0
  400862:	bf18      	it	ne
  400864:	2900      	cmpne	r1, #0
  400866:	d002      	beq.n	40086e <usart_sync_write+0x16>
  400868:	bb0a      	cbnz	r2, 4008ae <usart_sync_write+0x56>
  40086a:	2000      	movs	r0, #0
  40086c:	e000      	b.n	400870 <usart_sync_write+0x18>
  40086e:	2000      	movs	r0, #0
  400870:	22f1      	movs	r2, #241	; 0xf1
  400872:	4910      	ldr	r1, [pc, #64]	; (4008b4 <usart_sync_write+0x5c>)
  400874:	4b10      	ldr	r3, [pc, #64]	; (4008b8 <usart_sync_write+0x60>)
  400876:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  400878:	f105 0408 	add.w	r4, r5, #8
  40087c:	4620      	mov	r0, r4
  40087e:	4b0f      	ldr	r3, [pc, #60]	; (4008bc <usart_sync_write+0x64>)
  400880:	4798      	blx	r3
  400882:	2800      	cmp	r0, #0
  400884:	d0f8      	beq.n	400878 <usart_sync_write+0x20>
  400886:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400888:	5d79      	ldrb	r1, [r7, r5]
  40088a:	4620      	mov	r0, r4
  40088c:	4b0c      	ldr	r3, [pc, #48]	; (4008c0 <usart_sync_write+0x68>)
  40088e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400890:	4620      	mov	r0, r4
  400892:	4b0a      	ldr	r3, [pc, #40]	; (4008bc <usart_sync_write+0x64>)
  400894:	4798      	blx	r3
  400896:	2800      	cmp	r0, #0
  400898:	d0fa      	beq.n	400890 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  40089a:	3501      	adds	r5, #1
  40089c:	42b5      	cmp	r5, r6
  40089e:	d3f3      	bcc.n	400888 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  4008a0:	4620      	mov	r0, r4
  4008a2:	4b08      	ldr	r3, [pc, #32]	; (4008c4 <usart_sync_write+0x6c>)
  4008a4:	4798      	blx	r3
  4008a6:	2800      	cmp	r0, #0
  4008a8:	d0fa      	beq.n	4008a0 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  4008aa:	4628      	mov	r0, r5
  4008ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  4008ae:	2001      	movs	r0, #1
  4008b0:	e7de      	b.n	400870 <usart_sync_write+0x18>
  4008b2:	bf00      	nop
  4008b4:	00402590 	.word	0x00402590
  4008b8:	0040099d 	.word	0x0040099d
  4008bc:	00401281 	.word	0x00401281
  4008c0:	00401239 	.word	0x00401239
  4008c4:	004012a9 	.word	0x004012a9

004008c8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4008c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008cc:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4008ce:	4605      	mov	r5, r0
  4008d0:	4688      	mov	r8, r1
  4008d2:	2800      	cmp	r0, #0
  4008d4:	bf18      	it	ne
  4008d6:	2900      	cmpne	r1, #0
  4008d8:	d002      	beq.n	4008e0 <usart_sync_read+0x18>
  4008da:	b9d2      	cbnz	r2, 400912 <usart_sync_read+0x4a>
  4008dc:	2000      	movs	r0, #0
  4008de:	e000      	b.n	4008e2 <usart_sync_read+0x1a>
  4008e0:	2000      	movs	r0, #0
  4008e2:	f44f 7286 	mov.w	r2, #268	; 0x10c
  4008e6:	490c      	ldr	r1, [pc, #48]	; (400918 <usart_sync_read+0x50>)
  4008e8:	4b0c      	ldr	r3, [pc, #48]	; (40091c <usart_sync_read+0x54>)
  4008ea:	4798      	blx	r3
	uint32_t                      offset = 0;
  4008ec:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  4008ee:	f105 0408 	add.w	r4, r5, #8
  4008f2:	4620      	mov	r0, r4
  4008f4:	4b0a      	ldr	r3, [pc, #40]	; (400920 <usart_sync_read+0x58>)
  4008f6:	4798      	blx	r3
  4008f8:	2800      	cmp	r0, #0
  4008fa:	d0f8      	beq.n	4008ee <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4008fc:	4620      	mov	r0, r4
  4008fe:	4b09      	ldr	r3, [pc, #36]	; (400924 <usart_sync_read+0x5c>)
  400900:	4798      	blx	r3
  400902:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  400906:	3601      	adds	r6, #1
  400908:	42be      	cmp	r6, r7
  40090a:	d3f0      	bcc.n	4008ee <usart_sync_read+0x26>

	return (int32_t)offset;
}
  40090c:	4630      	mov	r0, r6
  40090e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400912:	2001      	movs	r0, #1
  400914:	e7e5      	b.n	4008e2 <usart_sync_read+0x1a>
  400916:	bf00      	nop
  400918:	00402590 	.word	0x00402590
  40091c:	0040099d 	.word	0x0040099d
  400920:	004012d1 	.word	0x004012d1
  400924:	0040125d 	.word	0x0040125d

00400928 <usart_sync_init>:
{
  400928:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40092a:	4604      	mov	r4, r0
  40092c:	460d      	mov	r5, r1
  40092e:	2800      	cmp	r0, #0
  400930:	bf18      	it	ne
  400932:	2900      	cmpne	r1, #0
  400934:	bf14      	ite	ne
  400936:	2001      	movne	r0, #1
  400938:	2000      	moveq	r0, #0
  40093a:	2234      	movs	r2, #52	; 0x34
  40093c:	4907      	ldr	r1, [pc, #28]	; (40095c <usart_sync_init+0x34>)
  40093e:	4b08      	ldr	r3, [pc, #32]	; (400960 <usart_sync_init+0x38>)
  400940:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400942:	4629      	mov	r1, r5
  400944:	f104 0008 	add.w	r0, r4, #8
  400948:	4b06      	ldr	r3, [pc, #24]	; (400964 <usart_sync_init+0x3c>)
  40094a:	4798      	blx	r3
	if (init_status) {
  40094c:	4603      	mov	r3, r0
  40094e:	b918      	cbnz	r0, 400958 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400950:	4a05      	ldr	r2, [pc, #20]	; (400968 <usart_sync_init+0x40>)
  400952:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400954:	4a05      	ldr	r2, [pc, #20]	; (40096c <usart_sync_init+0x44>)
  400956:	6022      	str	r2, [r4, #0]
}
  400958:	4618      	mov	r0, r3
  40095a:	bd38      	pop	{r3, r4, r5, pc}
  40095c:	00402590 	.word	0x00402590
  400960:	0040099d 	.word	0x0040099d
  400964:	004011cd 	.word	0x004011cd
  400968:	004008c9 	.word	0x004008c9
  40096c:	00400859 	.word	0x00400859

00400970 <usart_sync_enable>:
{
  400970:	b510      	push	{r4, lr}
	ASSERT(descr);
  400972:	4604      	mov	r4, r0
  400974:	2253      	movs	r2, #83	; 0x53
  400976:	4906      	ldr	r1, [pc, #24]	; (400990 <usart_sync_enable+0x20>)
  400978:	3000      	adds	r0, #0
  40097a:	bf18      	it	ne
  40097c:	2001      	movne	r0, #1
  40097e:	4b05      	ldr	r3, [pc, #20]	; (400994 <usart_sync_enable+0x24>)
  400980:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
  400982:	f104 0008 	add.w	r0, r4, #8
  400986:	4b04      	ldr	r3, [pc, #16]	; (400998 <usart_sync_enable+0x28>)
  400988:	4798      	blx	r3
}
  40098a:	2000      	movs	r0, #0
  40098c:	bd10      	pop	{r4, pc}
  40098e:	bf00      	nop
  400990:	00402590 	.word	0x00402590
  400994:	0040099d 	.word	0x0040099d
  400998:	00401205 	.word	0x00401205

0040099c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  40099c:	b900      	cbnz	r0, 4009a0 <assert+0x4>
		__asm("BKPT #0");
  40099e:	be00      	bkpt	0x0000
  4009a0:	4770      	bx	lr
	...

004009a4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
  4009a4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
  4009a6:	4a06      	ldr	r2, [pc, #24]	; (4009c0 <_sbrk+0x1c>)
  4009a8:	6812      	ldr	r2, [r2, #0]
  4009aa:	b122      	cbz	r2, 4009b6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4009ac:	4a04      	ldr	r2, [pc, #16]	; (4009c0 <_sbrk+0x1c>)
  4009ae:	6810      	ldr	r0, [r2, #0]

	heap += incr;
  4009b0:	4403      	add	r3, r0
  4009b2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
  4009b4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4009b6:	4903      	ldr	r1, [pc, #12]	; (4009c4 <_sbrk+0x20>)
  4009b8:	4a01      	ldr	r2, [pc, #4]	; (4009c0 <_sbrk+0x1c>)
  4009ba:	6011      	str	r1, [r2, #0]
  4009bc:	e7f6      	b.n	4009ac <_sbrk+0x8>
  4009be:	bf00      	nop
  4009c0:	204000b0 	.word	0x204000b0
  4009c4:	20400900 	.word	0x20400900

004009c8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
  4009c8:	f04f 30ff 	mov.w	r0, #4294967295
  4009cc:	4770      	bx	lr

004009ce <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
  4009ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4009d2:	604b      	str	r3, [r1, #4]

	return 0;
}
  4009d4:	2000      	movs	r0, #0
  4009d6:	4770      	bx	lr

004009d8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
  4009d8:	2001      	movs	r0, #1
  4009da:	4770      	bx	lr

004009dc <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
  4009dc:	2000      	movs	r0, #0
  4009de:	4770      	bx	lr

004009e0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
  4009e0:	f44f 7396 	mov.w	r3, #300	; 0x12c
  4009e4:	fb03 f000 	mul.w	r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
}
  4009e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4009ec:	fb03 f000 	mul.w	r0, r3, r0
  4009f0:	4770      	bx	lr
	...

004009f4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4009f4:	b500      	push	{lr}
  4009f6:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4009f8:	a801      	add	r0, sp, #4
  4009fa:	4b0e      	ldr	r3, [pc, #56]	; (400a34 <_init_chip+0x40>)
  4009fc:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4009fe:	4a0e      	ldr	r2, [pc, #56]	; (400a38 <_init_chip+0x44>)
  400a00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400a0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a10:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400a14:	a801      	add	r0, sp, #4
  400a16:	4b09      	ldr	r3, [pc, #36]	; (400a3c <_init_chip+0x48>)
  400a18:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400a1a:	4a09      	ldr	r2, [pc, #36]	; (400a40 <_init_chip+0x4c>)
  400a1c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400a1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400a22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400a26:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400a28:	4b06      	ldr	r3, [pc, #24]	; (400a44 <_init_chip+0x50>)
  400a2a:	4798      	blx	r3
}
  400a2c:	b003      	add	sp, #12
  400a2e:	f85d fb04 	ldr.w	pc, [sp], #4
  400a32:	bf00      	nop
  400a34:	00400631 	.word	0x00400631
  400a38:	e000ed00 	.word	0xe000ed00
  400a3c:	0040063f 	.word	0x0040063f
  400a40:	400e0c00 	.word	0x400e0c00
  400a44:	00401049 	.word	0x00401049

00400a48 <_can_irq_handler>:
 * \brief CAN interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _can_irq_handler(struct _can_async_device *dev)
{
  400a48:	b538      	push	{r3, r4, r5, lr}
  400a4a:	4605      	mov	r5, r0
	uint32_t ir;
	ir = hri_mcan_read_IR_reg(dev->hw);
  400a4c:	6803      	ldr	r3, [r0, #0]
	MCAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_mcan_ir_reg_t hri_mcan_read_IR_reg(const void *const hw)
{
	return ((Mcan *)hw)->MCAN_IR;
  400a4e:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & MCAN_IR_RF0N) {
  400a50:	f014 0f01 	tst.w	r4, #1
  400a54:	d11a      	bne.n	400a8c <_can_irq_handler+0x44>
		dev->cb.rx_done(dev);
	}

	if (ir & MCAN_IR_TC) {
  400a56:	f414 7f00 	tst.w	r4, #512	; 0x200
  400a5a:	d11a      	bne.n	400a92 <_can_irq_handler+0x4a>
		dev->cb.tx_done(dev);
	}

	if (ir & MCAN_IR_BO) {
  400a5c:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
  400a60:	d11b      	bne.n	400a9a <_can_irq_handler+0x52>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & MCAN_IR_EW) {
  400a62:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
  400a66:	d11d      	bne.n	400aa4 <_can_irq_handler+0x5c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & MCAN_IR_EP) {
  400a68:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
  400a6c:	d008      	beq.n	400a80 <_can_irq_handler+0x38>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400a6e:	68eb      	ldr	r3, [r5, #12]
  400a70:	682a      	ldr	r2, [r5, #0]
	return (((Mcan *)hw)->MCAN_PSR & MCAN_PSR_EP) > 0;
  400a72:	6c52      	ldr	r2, [r2, #68]	; 0x44
  400a74:	f012 0f20 	tst.w	r2, #32
  400a78:	d019      	beq.n	400aae <_can_irq_handler+0x66>
  400a7a:	2102      	movs	r1, #2
  400a7c:	4628      	mov	r0, r5
  400a7e:	4798      	blx	r3
	}

	if (ir & MCAN_IR_RF0L) {
  400a80:	f014 0f08 	tst.w	r4, #8
  400a84:	d115      	bne.n	400ab2 <_can_irq_handler+0x6a>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_mcan_write_IR_reg(dev->hw, ir);
  400a86:	682b      	ldr	r3, [r5, #0]
	((Mcan *)hw)->MCAN_IR = data;
  400a88:	651c      	str	r4, [r3, #80]	; 0x50
  400a8a:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
  400a8c:	6883      	ldr	r3, [r0, #8]
  400a8e:	4798      	blx	r3
  400a90:	e7e1      	b.n	400a56 <_can_irq_handler+0xe>
		dev->cb.tx_done(dev);
  400a92:	686b      	ldr	r3, [r5, #4]
  400a94:	4628      	mov	r0, r5
  400a96:	4798      	blx	r3
  400a98:	e7e0      	b.n	400a5c <_can_irq_handler+0x14>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
  400a9a:	68eb      	ldr	r3, [r5, #12]
  400a9c:	2103      	movs	r1, #3
  400a9e:	4628      	mov	r0, r5
  400aa0:	4798      	blx	r3
  400aa2:	e7de      	b.n	400a62 <_can_irq_handler+0x1a>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
  400aa4:	68eb      	ldr	r3, [r5, #12]
  400aa6:	2100      	movs	r1, #0
  400aa8:	4628      	mov	r0, r5
  400aaa:	4798      	blx	r3
  400aac:	e7dc      	b.n	400a68 <_can_irq_handler+0x20>
		dev->cb.irq_handler(dev, hri_mcan_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
  400aae:	2101      	movs	r1, #1
  400ab0:	e7e4      	b.n	400a7c <_can_irq_handler+0x34>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
  400ab2:	68eb      	ldr	r3, [r5, #12]
  400ab4:	2104      	movs	r1, #4
  400ab6:	4628      	mov	r0, r5
  400ab8:	4798      	blx	r3
  400aba:	e7e4      	b.n	400a86 <_can_irq_handler+0x3e>

00400abc <_can_async_init>:
{
  400abc:	b430      	push	{r4, r5}
	dev->hw = hw;
  400abe:	6001      	str	r1, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_INIT;
  400ac0:	698b      	ldr	r3, [r1, #24]
  400ac2:	f043 0301 	orr.w	r3, r3, #1
  400ac6:	618b      	str	r3, [r1, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw) == 0)
  400ac8:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400aca:	699a      	ldr	r2, [r3, #24]
  400acc:	f012 0f01 	tst.w	r2, #1
  400ad0:	d0fa      	beq.n	400ac8 <_can_async_init+0xc>
	((Mcan *)hw)->MCAN_CCCR |= MCAN_CCCR_CCE;
  400ad2:	699a      	ldr	r2, [r3, #24]
  400ad4:	f042 0202 	orr.w	r2, r2, #2
  400ad8:	619a      	str	r2, [r3, #24]
	if (hw == MCAN0) {
  400ada:	4b62      	ldr	r3, [pc, #392]	; (400c64 <_can_async_init+0x1a8>)
  400adc:	4299      	cmp	r1, r3
  400ade:	d014      	beq.n	400b0a <_can_async_init+0x4e>
	if (hw == MCAN1) {
  400ae0:	4b61      	ldr	r3, [pc, #388]	; (400c68 <_can_async_init+0x1ac>)
  400ae2:	4299      	cmp	r1, r3
  400ae4:	d066      	beq.n	400bb4 <_can_async_init+0xf8>
	hri_mcan_clear_CCCR_CCE_bit(dev->hw);
  400ae6:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_CCE;
  400ae8:	6993      	ldr	r3, [r2, #24]
  400aea:	f023 0302 	bic.w	r3, r3, #2
  400aee:	6193      	str	r3, [r2, #24]
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400af0:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400af2:	6993      	ldr	r3, [r2, #24]
  400af4:	f023 0301 	bic.w	r3, r3, #1
  400af8:	6193      	str	r3, [r2, #24]
	while (hri_mcan_get_CCCR_INIT_bit(dev->hw)) {
  400afa:	6803      	ldr	r3, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400afc:	699b      	ldr	r3, [r3, #24]
  400afe:	f013 0f01 	tst.w	r3, #1
  400b02:	d1fa      	bne.n	400afa <_can_async_init+0x3e>
}
  400b04:	2000      	movs	r0, #0
  400b06:	bc30      	pop	{r4, r5}
  400b08:	4770      	bx	lr
		dev->context = (void *)&_can0_context;
  400b0a:	4b58      	ldr	r3, [pc, #352]	; (400c6c <_can_async_init+0x1b0>)
  400b0c:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN0_CCCR_REG);
  400b0e:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400b10:	6993      	ldr	r3, [r2, #24]
  400b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400b16:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN0_NBTP_REG);
  400b18:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  400b1a:	4a55      	ldr	r2, [pc, #340]	; (400c70 <_can_async_init+0x1b4>)
  400b1c:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN0_DBTP_REG);
  400b1e:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400b20:	f640 1233 	movw	r2, #2355	; 0x933
  400b24:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN0_TDCR_REG);
  400b26:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  400b28:	f640 320b 	movw	r2, #2827	; 0xb0b
  400b2c:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN0_RXF0C_REG | (((uint32_t)can0_rx_fifo) & 0xFFFF));
  400b2e:	6804      	ldr	r4, [r0, #0]
  400b30:	4b50      	ldr	r3, [pc, #320]	; (400c74 <_can_async_init+0x1b8>)
  400b32:	4a51      	ldr	r2, [pc, #324]	; (400c78 <_can_async_init+0x1bc>)
  400b34:	b292      	uxth	r2, r2
  400b36:	4313      	orrs	r3, r2
}

static inline void hri_mcan_write_RXF0C_reg(const void *const hw, hri_mcan_rxf0c_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXF0C = data;
  400b38:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN0_RXESC_REG);
  400b3c:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_RXESC_reg(const void *const hw, hri_mcan_rxesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_RXESC = data;
  400b3e:	2400      	movs	r4, #0
  400b40:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN0_TXESC_REG);
  400b44:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_mcan_write_TXESC_reg(const void *const hw, hri_mcan_txesc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXESC = data;
  400b46:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN0_TXBC_REG | (((uint32_t)can0_tx_fifo) & 0xFFFF));
  400b4a:	6802      	ldr	r2, [r0, #0]
  400b4c:	4b4b      	ldr	r3, [pc, #300]	; (400c7c <_can_async_init+0x1c0>)
  400b4e:	b29b      	uxth	r3, r3
  400b50:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
	((Mcan *)hw)->MCAN_TXBC = data;
  400b54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN0_TXEFC_REG | (((uint32_t)can0_tx_event_fifo) & 0xFFFF));
  400b58:	6805      	ldr	r5, [r0, #0]
  400b5a:	4a49      	ldr	r2, [pc, #292]	; (400c80 <_can_async_init+0x1c4>)
  400b5c:	b293      	uxth	r3, r2
  400b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
}

static inline void hri_mcan_write_TXEFC_reg(const void *const hw, hri_mcan_txefc_reg_t data)
{
	MCAN_CRITICAL_SECTION_ENTER();
	((Mcan *)hw)->MCAN_TXEFC = data;
  400b62:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN0_GFC_REG);
  400b66:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  400b68:	252b      	movs	r5, #43	; 0x2b
  400b6a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN0_SIDFC_REG | (((uint32_t)can0_rx_std_filter) & 0xFFFF));
  400b6e:	6805      	ldr	r5, [r0, #0]
  400b70:	f102 0310 	add.w	r3, r2, #16
  400b74:	b29b      	uxth	r3, r3
  400b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_SIDFC = data;
  400b7a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN0_XIDFC_REG | (((uint32_t)can0_rx_ext_filter) & 0xFFFF));
  400b7e:	6805      	ldr	r5, [r0, #0]
  400b80:	f102 0318 	add.w	r3, r2, #24
  400b84:	b29b      	uxth	r3, r3
  400b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400b8a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN0_XIDAM_REG);
  400b8e:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400b90:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		_can0_dev = dev;
  400b94:	6290      	str	r0, [r2, #40]	; 0x28
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b96:	4b3b      	ldr	r3, [pc, #236]	; (400c84 <_can_async_init+0x1c8>)
  400b98:	2208      	movs	r2, #8
  400b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400b9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ba2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ba6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400baa:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400bac:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400bae:	2201      	movs	r2, #1
  400bb0:	65da      	str	r2, [r3, #92]	; 0x5c
  400bb2:	e795      	b.n	400ae0 <_can_async_init+0x24>
		dev->context = (void *)&_can1_context;
  400bb4:	4b34      	ldr	r3, [pc, #208]	; (400c88 <_can_async_init+0x1cc>)
  400bb6:	6183      	str	r3, [r0, #24]
		hri_mcan_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
  400bb8:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR |= mask;
  400bba:	6993      	ldr	r3, [r2, #24]
  400bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400bc0:	6193      	str	r3, [r2, #24]
		hri_mcan_write_NBTP_reg(dev->hw, CONF_CAN1_NBTP_REG);
  400bc2:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_NBTP = data;
  400bc4:	4a2a      	ldr	r2, [pc, #168]	; (400c70 <_can_async_init+0x1b4>)
  400bc6:	61da      	str	r2, [r3, #28]
		hri_mcan_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
  400bc8:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_DBTP = data;
  400bca:	f640 1233 	movw	r2, #2355	; 0x933
  400bce:	60da      	str	r2, [r3, #12]
		hri_mcan_write_TDCR_reg(dev->hw, CONF_CAN1_TDCR_REG);
  400bd0:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TDCR = data;
  400bd2:	f640 320b 	movw	r2, #2827	; 0xb0b
  400bd6:	649a      	str	r2, [r3, #72]	; 0x48
		hri_mcan_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | (((uint32_t)can1_rx_fifo) & 0xFFFF));
  400bd8:	6801      	ldr	r1, [r0, #0]
  400bda:	4b26      	ldr	r3, [pc, #152]	; (400c74 <_can_async_init+0x1b8>)
  400bdc:	4a2b      	ldr	r2, [pc, #172]	; (400c8c <_can_async_init+0x1d0>)
  400bde:	b292      	uxth	r2, r2
  400be0:	4313      	orrs	r3, r2
	((Mcan *)hw)->MCAN_RXF0C = data;
  400be2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
		hri_mcan_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
  400be6:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_RXESC = data;
  400be8:	2200      	movs	r2, #0
  400bea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		hri_mcan_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
  400bee:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXESC = data;
  400bf0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		hri_mcan_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | (((uint32_t)can1_tx_fifo) & 0xFFFF));
  400bf4:	6801      	ldr	r1, [r0, #0]
  400bf6:	4b26      	ldr	r3, [pc, #152]	; (400c90 <_can_async_init+0x1d4>)
  400bf8:	b29b      	uxth	r3, r3
  400bfa:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
	((Mcan *)hw)->MCAN_TXBC = data;
  400bfe:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
		hri_mcan_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | (((uint32_t)can1_tx_event_fifo) & 0xFFFF));
  400c02:	6804      	ldr	r4, [r0, #0]
  400c04:	491e      	ldr	r1, [pc, #120]	; (400c80 <_can_async_init+0x1c4>)
  400c06:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  400c0a:	b29b      	uxth	r3, r3
  400c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_TXEFC = data;
  400c10:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		hri_mcan_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
  400c14:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_GFC = data;
  400c16:	242b      	movs	r4, #43	; 0x2b
  400c18:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		hri_mcan_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | (((uint32_t)can1_rx_std_filter) & 0xFFFF));
  400c1c:	6804      	ldr	r4, [r0, #0]
  400c1e:	f101 033c 	add.w	r3, r1, #60	; 0x3c
  400c22:	b29b      	uxth	r3, r3
  400c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_SIDFC = data;
  400c28:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		hri_mcan_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | (((uint32_t)can1_rx_ext_filter) & 0xFFFF));
  400c2c:	6804      	ldr	r4, [r0, #0]
  400c2e:	f101 0344 	add.w	r3, r1, #68	; 0x44
  400c32:	b29b      	uxth	r3, r3
  400c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Mcan *)hw)->MCAN_XIDFC = data;
  400c38:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		hri_mcan_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
  400c3c:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_XIDAM = data;
  400c3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		_can1_dev = dev;
  400c42:	6548      	str	r0, [r1, #84]	; 0x54
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c44:	4b0f      	ldr	r3, [pc, #60]	; (400c84 <_can_async_init+0x1c8>)
  400c46:	2220      	movs	r2, #32
  400c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400c4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c50:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c54:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c58:	605a      	str	r2, [r3, #4]
		hri_mcan_write_ILE_reg(dev->hw, MCAN_ILE_EINT0);
  400c5a:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_ILE = data;
  400c5c:	2201      	movs	r2, #1
  400c5e:	65da      	str	r2, [r3, #92]	; 0x5c
  400c60:	e741      	b.n	400ae6 <_can_async_init+0x2a>
  400c62:	bf00      	nop
  400c64:	40030000 	.word	0x40030000
  400c68:	40034000 	.word	0x40034000
  400c6c:	20400000 	.word	0x20400000
  400c70:	06020a07 	.word	0x06020a07
  400c74:	80060000 	.word	0x80060000
  400c78:	20400178 	.word	0x20400178
  400c7c:	20400298 	.word	0x20400298
  400c80:	204000b4 	.word	0x204000b4
  400c84:	e000e100 	.word	0xe000e100
  400c88:	20400014 	.word	0x20400014
  400c8c:	20400238 	.word	0x20400238
  400c90:	204001d8 	.word	0x204001d8

00400c94 <_can_async_enable>:
	hri_mcan_clear_CCCR_INIT_bit(dev->hw);
  400c94:	6802      	ldr	r2, [r0, #0]
	((Mcan *)hw)->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400c96:	6993      	ldr	r3, [r2, #24]
  400c98:	f023 0301 	bic.w	r3, r3, #1
  400c9c:	6193      	str	r3, [r2, #24]
}
  400c9e:	2000      	movs	r0, #0
  400ca0:	4770      	bx	lr
	...

00400ca4 <_can_async_read>:
	if (!hri_mcan_read_RXF0S_F0FL_bf(dev->hw)) {
  400ca4:	6803      	ldr	r3, [r0, #0]
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0FL_Msk) >> MCAN_RXF0S_F0FL_Pos;
  400ca6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  400caa:	f012 0f7f 	tst.w	r2, #127	; 0x7f
  400cae:	d04d      	beq.n	400d4c <_can_async_read+0xa8>
{
  400cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400cb2:	b085      	sub	sp, #20
	return (((Mcan *)hw)->MCAN_RXF0S & MCAN_RXF0S_F0GI_Msk) >> MCAN_RXF0S_F0GI_Pos;
  400cb4:	f8d3 60a4 	ldr.w	r6, [r3, #164]	; 0xa4
  400cb8:	f3c6 2605 	ubfx	r6, r6, #8, #6
	if (dev->hw == MCAN0) {
  400cbc:	4a26      	ldr	r2, [pc, #152]	; (400d58 <_can_async_read+0xb4>)
  400cbe:	4293      	cmp	r3, r2
  400cc0:	d032      	beq.n	400d28 <_can_async_read+0x84>
	struct _can_rx_fifo_entry *f = NULL;
  400cc2:	2400      	movs	r4, #0
	if (dev->hw == MCAN1) {
  400cc4:	4a25      	ldr	r2, [pc, #148]	; (400d5c <_can_async_read+0xb8>)
  400cc6:	4293      	cmp	r3, r2
  400cc8:	d032      	beq.n	400d30 <_can_async_read+0x8c>
	if (f == NULL) {
  400cca:	2c00      	cmp	r4, #0
  400ccc:	d041      	beq.n	400d52 <_can_async_read+0xae>
	if (f->R0.bit.XTD == 1) {
  400cce:	6823      	ldr	r3, [r4, #0]
  400cd0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400cd4:	d130      	bne.n	400d38 <_can_async_read+0x94>
		msg->fmt = CAN_FMT_STDID;
  400cd6:	2300      	movs	r3, #0
  400cd8:	734b      	strb	r3, [r1, #13]
		msg->id = f->R0.bit.ID >> 18;
  400cda:	6823      	ldr	r3, [r4, #0]
  400cdc:	f3c3 438a 	ubfx	r3, r3, #18, #11
  400ce0:	600b      	str	r3, [r1, #0]
	if (f->R0.bit.RTR == 1) {
  400ce2:	6823      	ldr	r3, [r4, #0]
  400ce4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  400ce8:	d12d      	bne.n	400d46 <_can_async_read+0xa2>
  400cea:	460d      	mov	r5, r1
  400cec:	4607      	mov	r7, r0
	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
  400cee:	4b1c      	ldr	r3, [pc, #112]	; (400d60 <_can_async_read+0xbc>)
  400cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400cf2:	f10d 0e10 	add.w	lr, sp, #16
  400cf6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
  400cfa:	6863      	ldr	r3, [r4, #4]
  400cfc:	f3c3 4303 	ubfx	r3, r3, #16, #4
  400d00:	4473      	add	r3, lr
  400d02:	f813 2c10 	ldrb.w	r2, [r3, #-16]
  400d06:	732a      	strb	r2, [r5, #12]
	memcpy(msg->data, f->data, msg->len);
  400d08:	f104 0108 	add.w	r1, r4, #8
  400d0c:	68a8      	ldr	r0, [r5, #8]
  400d0e:	4b15      	ldr	r3, [pc, #84]	; (400d64 <_can_async_read+0xc0>)
  400d10:	4798      	blx	r3
	hri_mcan_write_RXF0A_F0AI_bf(dev->hw, get_index);
  400d12:	683a      	ldr	r2, [r7, #0]
	tmp = ((Mcan *)hw)->MCAN_RXF0A;
  400d14:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	tmp &= ~MCAN_RXF0A_F0AI_Msk;
  400d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	tmp |= MCAN_RXF0A_F0AI(data);
  400d1c:	431e      	orrs	r6, r3
	((Mcan *)hw)->MCAN_RXF0A = tmp;
  400d1e:	f8c2 60a8 	str.w	r6, [r2, #168]	; 0xa8
	return ERR_NONE;
  400d22:	2000      	movs	r0, #0
}
  400d24:	b005      	add	sp, #20
  400d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
  400d28:	4c0f      	ldr	r4, [pc, #60]	; (400d68 <_can_async_read+0xc4>)
  400d2a:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400d2e:	e7c9      	b.n	400cc4 <_can_async_read+0x20>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
  400d30:	4c0e      	ldr	r4, [pc, #56]	; (400d6c <_can_async_read+0xc8>)
  400d32:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  400d36:	e7c8      	b.n	400cca <_can_async_read+0x26>
		msg->fmt = CAN_FMT_EXTID;
  400d38:	2301      	movs	r3, #1
  400d3a:	734b      	strb	r3, [r1, #13]
		msg->id  = f->R0.bit.ID;
  400d3c:	6823      	ldr	r3, [r4, #0]
  400d3e:	f3c3 031c 	ubfx	r3, r3, #0, #29
  400d42:	600b      	str	r3, [r1, #0]
  400d44:	e7cd      	b.n	400ce2 <_can_async_read+0x3e>
		msg->type = CAN_TYPE_REMOTE;
  400d46:	2301      	movs	r3, #1
  400d48:	710b      	strb	r3, [r1, #4]
  400d4a:	e7ce      	b.n	400cea <_can_async_read+0x46>
		return ERR_NOT_FOUND;
  400d4c:	f06f 0009 	mvn.w	r0, #9
  400d50:	4770      	bx	lr
		return ERR_NO_RESOURCE;
  400d52:	f06f 001b 	mvn.w	r0, #27
  400d56:	e7e5      	b.n	400d24 <_can_async_read+0x80>
  400d58:	40030000 	.word	0x40030000
  400d5c:	40034000 	.word	0x40034000
  400d60:	004025ac 	.word	0x004025ac
  400d64:	004014cd 	.word	0x004014cd
  400d68:	20400178 	.word	0x20400178
  400d6c:	20400238 	.word	0x20400238

00400d70 <_can_async_write>:
{
  400d70:	b538      	push	{r3, r4, r5, lr}
	if (hri_mcan_get_TXFQS_TFQF_bit(dev->hw)) {
  400d72:	6802      	ldr	r2, [r0, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQF) > 0;
  400d74:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  400d78:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  400d7c:	f040 8082 	bne.w	400e84 <_can_async_write+0x114>
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400d80:	f8d2 50c4 	ldr.w	r5, [r2, #196]	; 0xc4
  400d84:	f3c5 4504 	ubfx	r5, r5, #16, #5
	if (dev->hw == MCAN0) {
  400d88:	4b41      	ldr	r3, [pc, #260]	; (400e90 <_can_async_write+0x120>)
  400d8a:	429a      	cmp	r2, r3
  400d8c:	d034      	beq.n	400df8 <_can_async_write+0x88>
	struct _can_tx_fifo_entry *f = NULL;
  400d8e:	2300      	movs	r3, #0
	if (dev->hw == MCAN1) {
  400d90:	4c40      	ldr	r4, [pc, #256]	; (400e94 <_can_async_write+0x124>)
  400d92:	42a2      	cmp	r2, r4
  400d94:	d034      	beq.n	400e00 <_can_async_write+0x90>
	if (f == NULL) {
  400d96:	2b00      	cmp	r3, #0
  400d98:	d077      	beq.n	400e8a <_can_async_write+0x11a>
	if (msg->fmt == CAN_FMT_EXTID) {
  400d9a:	7b4a      	ldrb	r2, [r1, #13]
  400d9c:	2a01      	cmp	r2, #1
  400d9e:	d033      	beq.n	400e08 <_can_async_write+0x98>
		f->T0.val = msg->id << 18;
  400da0:	680a      	ldr	r2, [r1, #0]
  400da2:	0492      	lsls	r2, r2, #18
  400da4:	601a      	str	r2, [r3, #0]
	if (msg->len <= 8) {
  400da6:	7b0a      	ldrb	r2, [r1, #12]
  400da8:	2a08      	cmp	r2, #8
  400daa:	d834      	bhi.n	400e16 <_can_async_write+0xa6>
		f->T1.bit.DLC = msg->len;
  400dac:	685c      	ldr	r4, [r3, #4]
  400dae:	f362 4413 	bfi	r4, r2, #16, #4
  400db2:	605c      	str	r4, [r3, #4]
  400db4:	4604      	mov	r4, r0
	f->T1.bit.FDF = hri_mcan_get_CCCR_FDOE_bit(dev->hw);
  400db6:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400db8:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_FDOE) >> MCAN_CCCR_FDOE_Pos;
  400dba:	f3c2 2200 	ubfx	r2, r2, #8, #1
  400dbe:	6858      	ldr	r0, [r3, #4]
  400dc0:	f362 5055 	bfi	r0, r2, #21, #1
  400dc4:	6058      	str	r0, [r3, #4]
	f->T1.bit.BRS = hri_mcan_get_CCCR_BRSE_bit(dev->hw);
  400dc6:	6822      	ldr	r2, [r4, #0]
	tmp = ((Mcan *)hw)->MCAN_CCCR;
  400dc8:	6992      	ldr	r2, [r2, #24]
	tmp = (tmp & MCAN_CCCR_BRSE) >> MCAN_CCCR_BRSE_Pos;
  400dca:	f3c2 2240 	ubfx	r2, r2, #9, #1
  400dce:	6858      	ldr	r0, [r3, #4]
  400dd0:	f362 5014 	bfi	r0, r2, #20, #1
  400dd4:	6058      	str	r0, [r3, #4]
	memcpy(f->data, msg->data, msg->len);
  400dd6:	7b0a      	ldrb	r2, [r1, #12]
  400dd8:	6889      	ldr	r1, [r1, #8]
  400dda:	f103 0008 	add.w	r0, r3, #8
  400dde:	4b2e      	ldr	r3, [pc, #184]	; (400e98 <_can_async_write+0x128>)
  400de0:	4798      	blx	r3
	hri_mcan_write_TXBAR_reg(dev->hw, 1 << hri_mcan_read_TXFQS_TFQPI_bf(dev->hw));
  400de2:	6821      	ldr	r1, [r4, #0]
	return (((Mcan *)hw)->MCAN_TXFQS & MCAN_TXFQS_TFQPI_Msk) >> MCAN_TXFQS_TFQPI_Pos;
  400de4:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
  400de8:	f3c2 4204 	ubfx	r2, r2, #16, #5
  400dec:	2301      	movs	r3, #1
  400dee:	4093      	lsls	r3, r2
	((Mcan *)hw)->MCAN_TXBAR = data;
  400df0:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
	return ERR_NONE;
  400df4:	2000      	movs	r0, #0
  400df6:	bd38      	pop	{r3, r4, r5, pc}
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
  400df8:	4b28      	ldr	r3, [pc, #160]	; (400e9c <_can_async_write+0x12c>)
  400dfa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400dfe:	e7c7      	b.n	400d90 <_can_async_write+0x20>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
  400e00:	4b27      	ldr	r3, [pc, #156]	; (400ea0 <_can_async_write+0x130>)
  400e02:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400e06:	e7c6      	b.n	400d96 <_can_async_write+0x26>
		f->T0.val     = msg->id;
  400e08:	680a      	ldr	r2, [r1, #0]
  400e0a:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
  400e0c:	681a      	ldr	r2, [r3, #0]
  400e0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400e12:	601a      	str	r2, [r3, #0]
  400e14:	e7c7      	b.n	400da6 <_can_async_write+0x36>
	} else if (msg->len <= 12) {
  400e16:	2a0c      	cmp	r2, #12
  400e18:	d805      	bhi.n	400e26 <_can_async_write+0xb6>
		f->T1.bit.DLC = 0x9;
  400e1a:	685a      	ldr	r2, [r3, #4]
  400e1c:	2409      	movs	r4, #9
  400e1e:	f364 4213 	bfi	r2, r4, #16, #4
  400e22:	605a      	str	r2, [r3, #4]
  400e24:	e7c6      	b.n	400db4 <_can_async_write+0x44>
	} else if (msg->len <= 16) {
  400e26:	2a10      	cmp	r2, #16
  400e28:	d805      	bhi.n	400e36 <_can_async_write+0xc6>
		f->T1.bit.DLC = 0xA;
  400e2a:	685a      	ldr	r2, [r3, #4]
  400e2c:	240a      	movs	r4, #10
  400e2e:	f364 4213 	bfi	r2, r4, #16, #4
  400e32:	605a      	str	r2, [r3, #4]
  400e34:	e7be      	b.n	400db4 <_can_async_write+0x44>
	} else if (msg->len <= 20) {
  400e36:	2a14      	cmp	r2, #20
  400e38:	d805      	bhi.n	400e46 <_can_async_write+0xd6>
		f->T1.bit.DLC = 0xB;
  400e3a:	685a      	ldr	r2, [r3, #4]
  400e3c:	240b      	movs	r4, #11
  400e3e:	f364 4213 	bfi	r2, r4, #16, #4
  400e42:	605a      	str	r2, [r3, #4]
  400e44:	e7b6      	b.n	400db4 <_can_async_write+0x44>
	} else if (msg->len <= 24) {
  400e46:	2a18      	cmp	r2, #24
  400e48:	d805      	bhi.n	400e56 <_can_async_write+0xe6>
		f->T1.bit.DLC = 0xC;
  400e4a:	685a      	ldr	r2, [r3, #4]
  400e4c:	240c      	movs	r4, #12
  400e4e:	f364 4213 	bfi	r2, r4, #16, #4
  400e52:	605a      	str	r2, [r3, #4]
  400e54:	e7ae      	b.n	400db4 <_can_async_write+0x44>
	} else if (msg->len <= 32) {
  400e56:	2a20      	cmp	r2, #32
  400e58:	d805      	bhi.n	400e66 <_can_async_write+0xf6>
		f->T1.bit.DLC = 0xD;
  400e5a:	685a      	ldr	r2, [r3, #4]
  400e5c:	240d      	movs	r4, #13
  400e5e:	f364 4213 	bfi	r2, r4, #16, #4
  400e62:	605a      	str	r2, [r3, #4]
  400e64:	e7a6      	b.n	400db4 <_can_async_write+0x44>
	} else if (msg->len <= 48) {
  400e66:	2a30      	cmp	r2, #48	; 0x30
  400e68:	d805      	bhi.n	400e76 <_can_async_write+0x106>
		f->T1.bit.DLC = 0xE;
  400e6a:	685a      	ldr	r2, [r3, #4]
  400e6c:	240e      	movs	r4, #14
  400e6e:	f364 4213 	bfi	r2, r4, #16, #4
  400e72:	605a      	str	r2, [r3, #4]
  400e74:	e79e      	b.n	400db4 <_can_async_write+0x44>
	} else if (msg->len <= 64) {
  400e76:	2a40      	cmp	r2, #64	; 0x40
  400e78:	d89c      	bhi.n	400db4 <_can_async_write+0x44>
		f->T1.bit.DLC = 0xF;
  400e7a:	685a      	ldr	r2, [r3, #4]
  400e7c:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
  400e80:	605a      	str	r2, [r3, #4]
  400e82:	e797      	b.n	400db4 <_can_async_write+0x44>
		return ERR_NO_RESOURCE;
  400e84:	f06f 001b 	mvn.w	r0, #27
  400e88:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_NO_RESOURCE;
  400e8a:	f06f 001b 	mvn.w	r0, #27
}
  400e8e:	bd38      	pop	{r3, r4, r5, pc}
  400e90:	40030000 	.word	0x40030000
  400e94:	40034000 	.word	0x40034000
  400e98:	004014cd 	.word	0x004014cd
  400e9c:	20400298 	.word	0x20400298
  400ea0:	204001d8 	.word	0x204001d8

00400ea4 <_can_async_set_irq_state>:
	if (type == CAN_ASYNC_RX_CB) {
  400ea4:	b121      	cbz	r1, 400eb0 <_can_async_set_irq_state+0xc>
	} else if (type == CAN_ASYNC_TX_CB) {
  400ea6:	2901      	cmp	r1, #1
  400ea8:	d009      	beq.n	400ebe <_can_async_set_irq_state+0x1a>
	} else if (type == CAN_ASYNC_IRQ_CB) {
  400eaa:	2902      	cmp	r1, #2
  400eac:	d014      	beq.n	400ed8 <_can_async_set_irq_state+0x34>
  400eae:	4770      	bx	lr
		hri_mcan_write_IE_RF0NE_bit(dev->hw, state);
  400eb0:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400eb2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_RF0NE;
  400eb4:	f023 0301 	bic.w	r3, r3, #1
	tmp |= value << MCAN_IE_RF0NE_Pos;
  400eb8:	431a      	orrs	r2, r3
	((Mcan *)hw)->MCAN_IE = tmp;
  400eba:	654a      	str	r2, [r1, #84]	; 0x54
  400ebc:	4770      	bx	lr
		hri_mcan_write_IE_TCE_bit(dev->hw, state);
  400ebe:	6801      	ldr	r1, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400ec0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
	tmp &= ~MCAN_IE_TCE;
  400ec2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
	tmp |= value << MCAN_IE_TCE_Pos;
  400ec6:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
	((Mcan *)hw)->MCAN_IE = tmp;
  400eca:	654a      	str	r2, [r1, #84]	; 0x54
		hri_mcan_write_TXBTIE_reg(dev->hw, MCAN_TXBTIE_MASK);
  400ecc:	6803      	ldr	r3, [r0, #0]
	((Mcan *)hw)->MCAN_TXBTIE = data;
  400ece:	f04f 32ff 	mov.w	r2, #4294967295
  400ed2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  400ed6:	4770      	bx	lr
		ie = hri_mcan_get_IE_reg(dev->hw, MCAN_IE_RF0NE | MCAN_IE_TCE);
  400ed8:	6802      	ldr	r2, [r0, #0]
	tmp = ((Mcan *)hw)->MCAN_IE;
  400eda:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tmp &= mask;
  400edc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
  400ee0:	059b      	lsls	r3, r3, #22
  400ee2:	0d9b      	lsrs	r3, r3, #22
	((Mcan *)hw)->MCAN_IE = data;
  400ee4:	6553      	str	r3, [r2, #84]	; 0x54
	return;
  400ee6:	e7e2      	b.n	400eae <_can_async_set_irq_state+0xa>

00400ee8 <_can_async_set_filter>:
{
  400ee8:	b470      	push	{r4, r5, r6}
	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
  400eea:	6984      	ldr	r4, [r0, #24]
  400eec:	68e0      	ldr	r0, [r4, #12]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
  400eee:	6924      	ldr	r4, [r4, #16]
  400ef0:	eb04 05c1 	add.w	r5, r4, r1, lsl #3
	if (fmt == CAN_FMT_STDID) {
  400ef4:	b9f2      	cbnz	r2, 400f34 <_can_async_set_filter+0x4c>
		if (filter == NULL) {
  400ef6:	b1d3      	cbz	r3, 400f2e <_can_async_set_filter+0x46>
		sf->S0.val       = filter->mask;
  400ef8:	685a      	ldr	r2, [r3, #4]
  400efa:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		sf->S0.bit.SFID1 = filter->id;
  400efe:	681a      	ldr	r2, [r3, #0]
  400f00:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400f04:	f362 431a 	bfi	r3, r2, #16, #11
  400f08:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
  400f0c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400f10:	2202      	movs	r2, #2
  400f12:	f362 739f 	bfi	r3, r2, #30, #2
  400f16:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
  400f1a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  400f1e:	2201      	movs	r2, #1
  400f20:	f362 63dd 	bfi	r3, r2, #27, #3
  400f24:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
  400f28:	2000      	movs	r0, #0
  400f2a:	bc70      	pop	{r4, r5, r6}
  400f2c:	4770      	bx	lr
			sf->S0.val = 0;
  400f2e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
			return ERR_NONE;
  400f32:	e7f9      	b.n	400f28 <_can_async_set_filter+0x40>
	} else if (fmt == CAN_FMT_EXTID) {
  400f34:	2a01      	cmp	r2, #1
  400f36:	d1f7      	bne.n	400f28 <_can_async_set_filter+0x40>
		if (filter == NULL) {
  400f38:	b18b      	cbz	r3, 400f5e <_can_async_set_filter+0x76>
		ef->F0.val      = filter->id;
  400f3a:	681a      	ldr	r2, [r3, #0]
  400f3c:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
  400f40:	f854 2031 	ldr.w	r2, [r4, r1, lsl #3]
  400f44:	2001      	movs	r0, #1
  400f46:	f360 725f 	bfi	r2, r0, #29, #3
  400f4a:	f844 2031 	str.w	r2, [r4, r1, lsl #3]
		ef->F1.val      = filter->mask;
  400f4e:	685b      	ldr	r3, [r3, #4]
  400f50:	606b      	str	r3, [r5, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
  400f52:	686b      	ldr	r3, [r5, #4]
  400f54:	2202      	movs	r2, #2
  400f56:	f362 739f 	bfi	r3, r2, #30, #2
  400f5a:	606b      	str	r3, [r5, #4]
  400f5c:	e7e4      	b.n	400f28 <_can_async_set_filter+0x40>
			ef->F0.val = 0;
  400f5e:	f844 3031 	str.w	r3, [r4, r1, lsl #3]
			return ERR_NONE;
  400f62:	e7e1      	b.n	400f28 <_can_async_set_filter+0x40>

00400f64 <MCAN0_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN0_INT0_Handler(void)
{
  400f64:	b508      	push	{r3, lr}
	_can_irq_handler(_can0_dev);
  400f66:	4b02      	ldr	r3, [pc, #8]	; (400f70 <MCAN0_INT0_Handler+0xc>)
  400f68:	6a98      	ldr	r0, [r3, #40]	; 0x28
  400f6a:	4b02      	ldr	r3, [pc, #8]	; (400f74 <MCAN0_INT0_Handler+0x10>)
  400f6c:	4798      	blx	r3
  400f6e:	bd08      	pop	{r3, pc}
  400f70:	204000b4 	.word	0x204000b4
  400f74:	00400a49 	.word	0x00400a49

00400f78 <MCAN1_INT0_Handler>:

/**
 * \internal CAN interrupt handler
 */
void MCAN1_INT0_Handler(void)
{
  400f78:	b508      	push	{r3, lr}
	_can_irq_handler(_can1_dev);
  400f7a:	4b02      	ldr	r3, [pc, #8]	; (400f84 <MCAN1_INT0_Handler+0xc>)
  400f7c:	6d58      	ldr	r0, [r3, #84]	; 0x54
  400f7e:	4b02      	ldr	r3, [pc, #8]	; (400f88 <MCAN1_INT0_Handler+0x10>)
  400f80:	4798      	blx	r3
  400f82:	bd08      	pop	{r3, pc}
  400f84:	204000b4 	.word	0x204000b4
  400f88:	00400a49 	.word	0x00400a49

00400f8c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400f8c:	490e      	ldr	r1, [pc, #56]	; (400fc8 <_pmc_init_sources+0x3c>)
  400f8e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400f90:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400f94:	4b0d      	ldr	r3, [pc, #52]	; (400fcc <_pmc_init_sources+0x40>)
  400f96:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400f98:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400f9a:	4b0b      	ldr	r3, [pc, #44]	; (400fc8 <_pmc_init_sources+0x3c>)
  400f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400f9e:	f013 0f01 	tst.w	r3, #1
  400fa2:	d0fa      	beq.n	400f9a <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400fa4:	4b08      	ldr	r3, [pc, #32]	; (400fc8 <_pmc_init_sources+0x3c>)
  400fa6:	6a19      	ldr	r1, [r3, #32]
  400fa8:	4a09      	ldr	r2, [pc, #36]	; (400fd0 <_pmc_init_sources+0x44>)
  400faa:	430a      	orrs	r2, r1
  400fac:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400fae:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400fb0:	4a08      	ldr	r2, [pc, #32]	; (400fd4 <_pmc_init_sources+0x48>)
  400fb2:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400fb4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400fb6:	4a08      	ldr	r2, [pc, #32]	; (400fd8 <_pmc_init_sources+0x4c>)
  400fb8:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400fba:	4b03      	ldr	r3, [pc, #12]	; (400fc8 <_pmc_init_sources+0x3c>)
  400fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400fbe:	f013 0f02 	tst.w	r3, #2
  400fc2:	d0fa      	beq.n	400fba <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400fc4:	4770      	bx	lr
  400fc6:	bf00      	nop
  400fc8:	400e0600 	.word	0x400e0600
  400fcc:	00373e01 	.word	0x00373e01
  400fd0:	01370000 	.word	0x01370000
  400fd4:	f800ffff 	.word	0xf800ffff
  400fd8:	20183f01 	.word	0x20183f01

00400fdc <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400fdc:	4a11      	ldr	r2, [pc, #68]	; (401024 <_pmc_init_master_clock+0x48>)
  400fde:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400fe4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400fe6:	4b0f      	ldr	r3, [pc, #60]	; (401024 <_pmc_init_master_clock+0x48>)
  400fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400fea:	f013 0f08 	tst.w	r3, #8
  400fee:	d0fa      	beq.n	400fe6 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400ff0:	4a0c      	ldr	r2, [pc, #48]	; (401024 <_pmc_init_master_clock+0x48>)
  400ff2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400ffc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400ffe:	4b09      	ldr	r3, [pc, #36]	; (401024 <_pmc_init_master_clock+0x48>)
  401000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401002:	f013 0f08 	tst.w	r3, #8
  401006:	d0fa      	beq.n	400ffe <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401008:	4a06      	ldr	r2, [pc, #24]	; (401024 <_pmc_init_master_clock+0x48>)
  40100a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  40100c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401010:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401014:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401016:	4b03      	ldr	r3, [pc, #12]	; (401024 <_pmc_init_master_clock+0x48>)
  401018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40101a:	f013 0f08 	tst.w	r3, #8
  40101e:	d0fa      	beq.n	401016 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401020:	4770      	bx	lr
  401022:	bf00      	nop
  401024:	400e0600 	.word	0x400e0600

00401028 <_pmc_init_program_clock>:
}

static inline void hri_pmc_write_PCK_reg(const void *const hw, uint8_t index, hri_pmc_pck_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_PCK[index] = data;
  401028:	2201      	movs	r2, #1
  40102a:	4b06      	ldr	r3, [pc, #24]	; (401044 <_pmc_init_program_clock+0x1c>)
  40102c:	655a      	str	r2, [r3, #84]	; 0x54
	return (((Pmc *)hw)->PMC_SR & PMC_SR_PCKRDY5) > 0;
  40102e:	4b05      	ldr	r3, [pc, #20]	; (401044 <_pmc_init_program_clock+0x1c>)
  401030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK4);
#endif

#if (CONF_CLK_PCK5_ENABLE == 1)
	hri_pmc_write_PCK_reg(PMC, 5, PMC_PCK_CSS(CONF_CLK_GEN_PCK5_SRC) | PMC_PCK_PRES(CONF_PCK5_PRESC - 1));
	while (!hri_pmc_get_SR_PCKRDY5_bit(PMC)) {
  401032:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401036:	d0fa      	beq.n	40102e <_pmc_init_program_clock+0x6>
	((Pmc *)hw)->PMC_SCER = data;
  401038:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40103c:	4b01      	ldr	r3, [pc, #4]	; (401044 <_pmc_init_program_clock+0x1c>)
  40103e:	601a      	str	r2, [r3, #0]
  401040:	4770      	bx	lr
  401042:	bf00      	nop
  401044:	400e0600 	.word	0x400e0600

00401048 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  401048:	b508      	push	{r3, lr}
	_pmc_init_sources();
  40104a:	4b03      	ldr	r3, [pc, #12]	; (401058 <_pmc_init+0x10>)
  40104c:	4798      	blx	r3
	_pmc_init_master_clock();
  40104e:	4b03      	ldr	r3, [pc, #12]	; (40105c <_pmc_init+0x14>)
  401050:	4798      	blx	r3
	_pmc_init_program_clock();
  401052:	4b03      	ldr	r3, [pc, #12]	; (401060 <_pmc_init+0x18>)
  401054:	4798      	blx	r3
  401056:	bd08      	pop	{r3, pc}
  401058:	00400f8d 	.word	0x00400f8d
  40105c:	00400fdd 	.word	0x00400fdd
  401060:	00401029 	.word	0x00401029

00401064 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
  401064:	4b03      	ldr	r3, [pc, #12]	; (401074 <_system_time_init+0x10>)
  401066:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  40106a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
  40106c:	2205      	movs	r2, #5
  40106e:	601a      	str	r2, [r3, #0]
  401070:	4770      	bx	lr
  401072:	bf00      	nop
  401074:	e000e010 	.word	0xe000e010

00401078 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
  401078:	b508      	push	{r3, lr}
	_system_time_init(hw);
  40107a:	4b01      	ldr	r3, [pc, #4]	; (401080 <_delay_init+0x8>)
  40107c:	4798      	blx	r3
  40107e:	bd08      	pop	{r3, pc}
  401080:	00401065 	.word	0x00401065

00401084 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
  401084:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
  401086:	e00d      	b.n	4010a4 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
  401088:	4b0d      	ldr	r3, [pc, #52]	; (4010c0 <_delay_cycles+0x3c>)
  40108a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  40108e:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
  401090:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  401092:	4b0b      	ldr	r3, [pc, #44]	; (4010c0 <_delay_cycles+0x3c>)
  401094:	681b      	ldr	r3, [r3, #0]
  401096:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40109a:	d0fa      	beq.n	401092 <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
  40109c:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
  4010a0:	3101      	adds	r1, #1
	while (n--) {
  4010a2:	4610      	mov	r0, r2
  4010a4:	1e43      	subs	r3, r0, #1
  4010a6:	b2da      	uxtb	r2, r3
  4010a8:	2800      	cmp	r0, #0
  4010aa:	d1ed      	bne.n	401088 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
  4010ac:	4b04      	ldr	r3, [pc, #16]	; (4010c0 <_delay_cycles+0x3c>)
  4010ae:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
  4010b0:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
  4010b2:	4b03      	ldr	r3, [pc, #12]	; (4010c0 <_delay_cycles+0x3c>)
  4010b4:	681b      	ldr	r3, [r3, #0]
  4010b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4010ba:	d0fa      	beq.n	4010b2 <_delay_cycles+0x2e>
		;
}
  4010bc:	4770      	bx	lr
  4010be:	bf00      	nop
  4010c0:	e000e010 	.word	0xe000e010

004010c4 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  4010c4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4010c6:	4604      	mov	r4, r0
  4010c8:	f240 2219 	movw	r2, #537	; 0x219
  4010cc:	4912      	ldr	r1, [pc, #72]	; (401118 <_uart_get_hardware_index+0x54>)
  4010ce:	3000      	adds	r0, #0
  4010d0:	bf18      	it	ne
  4010d2:	2001      	movne	r0, #1
  4010d4:	4b11      	ldr	r3, [pc, #68]	; (40111c <_uart_get_hardware_index+0x58>)
  4010d6:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  4010d8:	4b11      	ldr	r3, [pc, #68]	; (401120 <_uart_get_hardware_index+0x5c>)
  4010da:	429c      	cmp	r4, r3
  4010dc:	d013      	beq.n	401106 <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  4010de:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4010e2:	429c      	cmp	r4, r3
  4010e4:	d011      	beq.n	40110a <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  4010e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4010ea:	429c      	cmp	r4, r3
  4010ec:	d00f      	beq.n	40110e <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  4010ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4010f2:	429c      	cmp	r4, r3
  4010f4:	d00d      	beq.n	401112 <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  4010f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4010fa:	429c      	cmp	r4, r3
  4010fc:	d001      	beq.n	401102 <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  4010fe:	20ff      	movs	r0, #255	; 0xff
	}
}
  401100:	bd10      	pop	{r4, pc}
		return 4;
  401102:	2004      	movs	r0, #4
  401104:	bd10      	pop	{r4, pc}
		return 0;
  401106:	2000      	movs	r0, #0
  401108:	bd10      	pop	{r4, pc}
		return 1;
  40110a:	2001      	movs	r0, #1
  40110c:	bd10      	pop	{r4, pc}
		return 2;
  40110e:	2002      	movs	r0, #2
  401110:	bd10      	pop	{r4, pc}
		return 3;
  401112:	2003      	movs	r0, #3
  401114:	bd10      	pop	{r4, pc}
  401116:	bf00      	nop
  401118:	004025c8 	.word	0x004025c8
  40111c:	0040099d 	.word	0x0040099d
  401120:	400e0800 	.word	0x400e0800

00401124 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  401124:	b510      	push	{r4, lr}
	ASSERT(hw);
  401126:	4604      	mov	r4, r0
  401128:	f44f 7227 	mov.w	r2, #668	; 0x29c
  40112c:	490e      	ldr	r1, [pc, #56]	; (401168 <_get_uart_index+0x44>)
  40112e:	3000      	adds	r0, #0
  401130:	bf18      	it	ne
  401132:	2001      	movne	r0, #1
  401134:	4b0d      	ldr	r3, [pc, #52]	; (40116c <_get_uart_index+0x48>)
  401136:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  401138:	4620      	mov	r0, r4
  40113a:	4b0d      	ldr	r3, [pc, #52]	; (401170 <_get_uart_index+0x4c>)
  40113c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  40113e:	2300      	movs	r3, #0
  401140:	b143      	cbz	r3, 401154 <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  401142:	f240 22a6 	movw	r2, #678	; 0x2a6
  401146:	4908      	ldr	r1, [pc, #32]	; (401168 <_get_uart_index+0x44>)
  401148:	2000      	movs	r0, #0
  40114a:	4b08      	ldr	r3, [pc, #32]	; (40116c <_get_uart_index+0x48>)
  40114c:	4798      	blx	r3
	return 0;
  40114e:	2300      	movs	r3, #0
}
  401150:	4618      	mov	r0, r3
  401152:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  401154:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401158:	008a      	lsls	r2, r1, #2
  40115a:	4906      	ldr	r1, [pc, #24]	; (401174 <_get_uart_index+0x50>)
  40115c:	5c8a      	ldrb	r2, [r1, r2]
  40115e:	4290      	cmp	r0, r2
  401160:	d0f6      	beq.n	401150 <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  401162:	3301      	adds	r3, #1
  401164:	b2db      	uxtb	r3, r3
  401166:	e7eb      	b.n	401140 <_get_uart_index+0x1c>
  401168:	004025c8 	.word	0x004025c8
  40116c:	0040099d 	.word	0x0040099d
  401170:	004010c5 	.word	0x004010c5
  401174:	004025bc 	.word	0x004025bc

00401178 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  401178:	b510      	push	{r4, lr}
	ASSERT(hw);
  40117a:	4604      	mov	r4, r0
  40117c:	f240 22b3 	movw	r2, #691	; 0x2b3
  401180:	490d      	ldr	r1, [pc, #52]	; (4011b8 <_uart_init+0x40>)
  401182:	3000      	adds	r0, #0
  401184:	bf18      	it	ne
  401186:	2001      	movne	r0, #1
  401188:	4b0c      	ldr	r3, [pc, #48]	; (4011bc <_uart_init+0x44>)
  40118a:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  40118c:	4620      	mov	r0, r4
  40118e:	4b0c      	ldr	r3, [pc, #48]	; (4011c0 <_uart_init+0x48>)
  401190:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  401192:	4b0c      	ldr	r3, [pc, #48]	; (4011c4 <_uart_init+0x4c>)
  401194:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  401198:	23ac      	movs	r3, #172	; 0xac
  40119a:	6023      	str	r3, [r4, #0]
  40119c:	f44f 7380 	mov.w	r3, #256	; 0x100
  4011a0:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  4011a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4011a6:	0082      	lsls	r2, r0, #2
  4011a8:	4b07      	ldr	r3, [pc, #28]	; (4011c8 <_uart_init+0x50>)
  4011aa:	4413      	add	r3, r2
  4011ac:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  4011ae:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  4011b0:	2351      	movs	r3, #81	; 0x51
  4011b2:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  4011b4:	2000      	movs	r0, #0
  4011b6:	bd10      	pop	{r4, pc}
  4011b8:	004025c8 	.word	0x004025c8
  4011bc:	0040099d 	.word	0x0040099d
  4011c0:	00401125 	.word	0x00401125
  4011c4:	55415200 	.word	0x55415200
  4011c8:	004025bc 	.word	0x004025bc

004011cc <_usart_sync_init>:
{
  4011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011ce:	460c      	mov	r4, r1
	ASSERT(device);
  4011d0:	4e09      	ldr	r6, [pc, #36]	; (4011f8 <_usart_sync_init+0x2c>)
  4011d2:	4607      	mov	r7, r0
  4011d4:	22a9      	movs	r2, #169	; 0xa9
  4011d6:	4631      	mov	r1, r6
  4011d8:	3000      	adds	r0, #0
  4011da:	bf18      	it	ne
  4011dc:	2001      	movne	r0, #1
  4011de:	4d07      	ldr	r5, [pc, #28]	; (4011fc <_usart_sync_init+0x30>)
  4011e0:	47a8      	blx	r5
	ASSERT(hw);
  4011e2:	22aa      	movs	r2, #170	; 0xaa
  4011e4:	4631      	mov	r1, r6
  4011e6:	1c20      	adds	r0, r4, #0
  4011e8:	bf18      	it	ne
  4011ea:	2001      	movne	r0, #1
  4011ec:	47a8      	blx	r5
	device->hw = hw;
  4011ee:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  4011f0:	4620      	mov	r0, r4
  4011f2:	4b03      	ldr	r3, [pc, #12]	; (401200 <_usart_sync_init+0x34>)
  4011f4:	4798      	blx	r3
}
  4011f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011f8:	004025c8 	.word	0x004025c8
  4011fc:	0040099d 	.word	0x0040099d
  401200:	00401179 	.word	0x00401179

00401204 <_usart_sync_enable>:
{
  401204:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  401206:	4e0a      	ldr	r6, [pc, #40]	; (401230 <_usart_sync_enable+0x2c>)
  401208:	4604      	mov	r4, r0
  40120a:	22f2      	movs	r2, #242	; 0xf2
  40120c:	4631      	mov	r1, r6
  40120e:	3000      	adds	r0, #0
  401210:	bf18      	it	ne
  401212:	2001      	movne	r0, #1
  401214:	4d07      	ldr	r5, [pc, #28]	; (401234 <_usart_sync_enable+0x30>)
  401216:	47a8      	blx	r5
	_uart_enable(device->hw);
  401218:	6824      	ldr	r4, [r4, #0]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _uart_enable(void *const hw)
{
	ASSERT(hw);
  40121a:	f240 22d7 	movw	r2, #727	; 0x2d7
  40121e:	4631      	mov	r1, r6
  401220:	1c20      	adds	r0, r4, #0
  401222:	bf18      	it	ne
  401224:	2001      	movne	r0, #1
  401226:	47a8      	blx	r5
	((Uart *)hw)->UART_CR = data;
  401228:	2350      	movs	r3, #80	; 0x50
  40122a:	6023      	str	r3, [r4, #0]
  40122c:	bd70      	pop	{r4, r5, r6, pc}
  40122e:	bf00      	nop
  401230:	004025c8 	.word	0x004025c8
  401234:	0040099d 	.word	0x0040099d

00401238 <_usart_sync_write_byte>:
{
  401238:	b538      	push	{r3, r4, r5, lr}
  40123a:	460c      	mov	r4, r1
	ASSERT(device);
  40123c:	4605      	mov	r5, r0
  40123e:	f240 1295 	movw	r2, #405	; 0x195
  401242:	4904      	ldr	r1, [pc, #16]	; (401254 <_usart_sync_write_byte+0x1c>)
  401244:	3000      	adds	r0, #0
  401246:	bf18      	it	ne
  401248:	2001      	movne	r0, #1
  40124a:	4b03      	ldr	r3, [pc, #12]	; (401258 <_usart_sync_write_byte+0x20>)
  40124c:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  40124e:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  401250:	61dc      	str	r4, [r3, #28]
  401252:	bd38      	pop	{r3, r4, r5, pc}
  401254:	004025c8 	.word	0x004025c8
  401258:	0040099d 	.word	0x0040099d

0040125c <_usart_sync_read_byte>:
{
  40125c:	b510      	push	{r4, lr}
	ASSERT(device);
  40125e:	4604      	mov	r4, r0
  401260:	f240 12a7 	movw	r2, #423	; 0x1a7
  401264:	4904      	ldr	r1, [pc, #16]	; (401278 <_usart_sync_read_byte+0x1c>)
  401266:	3000      	adds	r0, #0
  401268:	bf18      	it	ne
  40126a:	2001      	movne	r0, #1
  40126c:	4b03      	ldr	r3, [pc, #12]	; (40127c <_usart_sync_read_byte+0x20>)
  40126e:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  401270:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  401272:	6998      	ldr	r0, [r3, #24]
}
  401274:	b2c0      	uxtb	r0, r0
  401276:	bd10      	pop	{r4, pc}
  401278:	004025c8 	.word	0x004025c8
  40127c:	0040099d 	.word	0x0040099d

00401280 <_usart_sync_is_ready_to_send>:
{
  401280:	b510      	push	{r4, lr}
	ASSERT(device);
  401282:	4604      	mov	r4, r0
  401284:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  401288:	4905      	ldr	r1, [pc, #20]	; (4012a0 <_usart_sync_is_ready_to_send+0x20>)
  40128a:	3000      	adds	r0, #0
  40128c:	bf18      	it	ne
  40128e:	2001      	movne	r0, #1
  401290:	4b04      	ldr	r3, [pc, #16]	; (4012a4 <_usart_sync_is_ready_to_send+0x24>)
  401292:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  401294:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  401296:	6958      	ldr	r0, [r3, #20]
}
  401298:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40129c:	bd10      	pop	{r4, pc}
  40129e:	bf00      	nop
  4012a0:	004025c8 	.word	0x004025c8
  4012a4:	0040099d 	.word	0x0040099d

004012a8 <_usart_sync_is_transmit_done>:
{
  4012a8:	b510      	push	{r4, lr}
	ASSERT(device);
  4012aa:	4604      	mov	r4, r0
  4012ac:	f240 12b9 	movw	r2, #441	; 0x1b9
  4012b0:	4905      	ldr	r1, [pc, #20]	; (4012c8 <_usart_sync_is_transmit_done+0x20>)
  4012b2:	3000      	adds	r0, #0
  4012b4:	bf18      	it	ne
  4012b6:	2001      	movne	r0, #1
  4012b8:	4b04      	ldr	r3, [pc, #16]	; (4012cc <_usart_sync_is_transmit_done+0x24>)
  4012ba:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  4012bc:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  4012be:	6958      	ldr	r0, [r3, #20]
}
  4012c0:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4012c4:	bd10      	pop	{r4, pc}
  4012c6:	bf00      	nop
  4012c8:	004025c8 	.word	0x004025c8
  4012cc:	0040099d 	.word	0x0040099d

004012d0 <_usart_sync_is_byte_received>:
{
  4012d0:	b510      	push	{r4, lr}
	ASSERT(device);
  4012d2:	4604      	mov	r4, r0
  4012d4:	f240 12cb 	movw	r2, #459	; 0x1cb
  4012d8:	4905      	ldr	r1, [pc, #20]	; (4012f0 <_usart_sync_is_byte_received+0x20>)
  4012da:	3000      	adds	r0, #0
  4012dc:	bf18      	it	ne
  4012de:	2001      	movne	r0, #1
  4012e0:	4b04      	ldr	r3, [pc, #16]	; (4012f4 <_usart_sync_is_byte_received+0x24>)
  4012e2:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  4012e4:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  4012e6:	6958      	ldr	r0, [r3, #20]
  4012e8:	f000 0001 	and.w	r0, r0, #1
}
  4012ec:	bd10      	pop	{r4, pc}
  4012ee:	bf00      	nop
  4012f0:	004025c8 	.word	0x004025c8
  4012f4:	0040099d 	.word	0x0040099d

004012f8 <_uart_get_usart_sync>:
}
  4012f8:	2000      	movs	r0, #0
  4012fa:	4770      	bx	lr

004012fc <main>:
#include <atmel_start.h>

int main(void)
{
  4012fc:	b500      	push	{lr}
  4012fe:	b087      	sub	sp, #28
	/* Initializing drivers and everything for MCU*/
	atmel_start_init();
  401300:	4b20      	ldr	r3, [pc, #128]	; (401384 <main+0x88>)
  401302:	4798      	blx	r3

	/* Init async CAN0 and CAN1 */
	CAN_1_example();
  401304:	4b20      	ldr	r3, [pc, #128]	; (401388 <main+0x8c>)
  401306:	4798      	blx	r3
	CAN_0_example();
  401308:	4b20      	ldr	r3, [pc, #128]	; (40138c <main+0x90>)
  40130a:	4798      	blx	r3
	
	uint8_t send_data[4];
	static uint8_t inc_num = 0;
	
	struct can_message msg;
	msg.id   = 0x45A;
  40130c:	f240 435a 	movw	r3, #1114	; 0x45a
  401310:	9301      	str	r3, [sp, #4]
	msg.type = CAN_TYPE_DATA;
  401312:	2300      	movs	r3, #0
  401314:	f88d 3008 	strb.w	r3, [sp, #8]
	msg.data = send_data;
  401318:	aa05      	add	r2, sp, #20
  40131a:	9203      	str	r2, [sp, #12]
	msg.len  = 4;
  40131c:	2204      	movs	r2, #4
  40131e:	f88d 2010 	strb.w	r2, [sp, #16]
	msg.fmt  = CAN_FMT_STDID;
  401322:	f88d 3011 	strb.w	r3, [sp, #17]
	
	while (1) {
		can_async_write(&CAN_0, &msg);
  401326:	a901      	add	r1, sp, #4
  401328:	4819      	ldr	r0, [pc, #100]	; (401390 <main+0x94>)
  40132a:	4d1a      	ldr	r5, [pc, #104]	; (401394 <main+0x98>)
  40132c:	47a8      	blx	r5
		delay_ms(1000);
  40132e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401332:	4e19      	ldr	r6, [pc, #100]	; (401398 <main+0x9c>)
  401334:	47b0      	blx	r6
		send_data[0] = inc_num;
  401336:	4c19      	ldr	r4, [pc, #100]	; (40139c <main+0xa0>)
  401338:	7823      	ldrb	r3, [r4, #0]
  40133a:	f88d 3014 	strb.w	r3, [sp, #20]
		send_data[1] = inc_num+50;
  40133e:	f103 0232 	add.w	r2, r3, #50	; 0x32
  401342:	f88d 2015 	strb.w	r2, [sp, #21]
		send_data[2] = inc_num+100;
  401346:	f103 0264 	add.w	r2, r3, #100	; 0x64
  40134a:	f88d 2016 	strb.w	r2, [sp, #22]
		send_data[3] = inc_num+150;
  40134e:	3b6a      	subs	r3, #106	; 0x6a
  401350:	f88d 3017 	strb.w	r3, [sp, #23]
		
		delay_ms(1000);
  401354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  401358:	47b0      	blx	r6
		can_async_write(&CAN_1, &msg);
  40135a:	a901      	add	r1, sp, #4
  40135c:	4810      	ldr	r0, [pc, #64]	; (4013a0 <main+0xa4>)
  40135e:	47a8      	blx	r5
		send_data[0] = inc_num;
  401360:	7823      	ldrb	r3, [r4, #0]
  401362:	f88d 3014 	strb.w	r3, [sp, #20]
		send_data[1] = inc_num+5;
  401366:	1d5a      	adds	r2, r3, #5
  401368:	f88d 2015 	strb.w	r2, [sp, #21]
		send_data[2] = inc_num+10;
  40136c:	f103 020a 	add.w	r2, r3, #10
  401370:	f88d 2016 	strb.w	r2, [sp, #22]
		send_data[3] = inc_num+15;
  401374:	f103 020f 	add.w	r2, r3, #15
  401378:	f88d 2017 	strb.w	r2, [sp, #23]
		inc_num++;
  40137c:	3301      	adds	r3, #1
  40137e:	7023      	strb	r3, [r4, #0]
  401380:	e7d1      	b.n	401326 <main+0x2a>
  401382:	bf00      	nop
  401384:	004001d5 	.word	0x004001d5
  401388:	00400569 	.word	0x00400569
  40138c:	0040049d 	.word	0x0040049d
  401390:	2040011c 	.word	0x2040011c
  401394:	00400711 	.word	0x00400711
  401398:	004007d9 	.word	0x004007d9
  40139c:	2040010c 	.word	0x2040010c
  4013a0:	20400150 	.word	0x20400150

004013a4 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
  4013a4:	b958      	cbnz	r0, 4013be <_read+0x1a>
{
  4013a6:	b508      	push	{r3, lr}
  4013a8:	460b      	mov	r3, r1
  4013aa:	4611      	mov	r1, r2
  4013ac:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
  4013ae:	4b05      	ldr	r3, [pc, #20]	; (4013c4 <_read+0x20>)
  4013b0:	4798      	blx	r3
	if (n < 0) {
  4013b2:	2800      	cmp	r0, #0
  4013b4:	db00      	blt.n	4013b8 <_read+0x14>
		return -1;
	}

	return n;
}
  4013b6:	bd08      	pop	{r3, pc}
		return -1;
  4013b8:	f04f 30ff 	mov.w	r0, #4294967295
  4013bc:	bd08      	pop	{r3, pc}
		return -1;
  4013be:	f04f 30ff 	mov.w	r0, #4294967295
  4013c2:	4770      	bx	lr
  4013c4:	0040141d 	.word	0x0040141d

004013c8 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
  4013c8:	3801      	subs	r0, #1
  4013ca:	2802      	cmp	r0, #2
  4013cc:	d80b      	bhi.n	4013e6 <_write+0x1e>
{
  4013ce:	b508      	push	{r3, lr}
  4013d0:	460b      	mov	r3, r1
  4013d2:	4611      	mov	r1, r2
  4013d4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
  4013d6:	4b05      	ldr	r3, [pc, #20]	; (4013ec <_write+0x24>)
  4013d8:	4798      	blx	r3
	if (n < 0) {
  4013da:	2800      	cmp	r0, #0
  4013dc:	db00      	blt.n	4013e0 <_write+0x18>
		return -1;
	}

	return n;
}
  4013de:	bd08      	pop	{r3, pc}
		return -1;
  4013e0:	f04f 30ff 	mov.w	r0, #4294967295
  4013e4:	bd08      	pop	{r3, pc}
		return -1;
  4013e6:	f04f 30ff 	mov.w	r0, #4294967295
  4013ea:	4770      	bx	lr
  4013ec:	00401441 	.word	0x00401441

004013f0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
  4013f0:	b570      	push	{r4, r5, r6, lr}
  4013f2:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
  4013f4:	4d06      	ldr	r5, [pc, #24]	; (401410 <stdio_io_init+0x20>)
  4013f6:	682b      	ldr	r3, [r5, #0]
  4013f8:	2100      	movs	r1, #0
  4013fa:	6898      	ldr	r0, [r3, #8]
  4013fc:	4c05      	ldr	r4, [pc, #20]	; (401414 <stdio_io_init+0x24>)
  4013fe:	47a0      	blx	r4
	setbuf(stdin, NULL);
  401400:	682b      	ldr	r3, [r5, #0]
  401402:	2100      	movs	r1, #0
  401404:	6858      	ldr	r0, [r3, #4]
  401406:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
  401408:	4b03      	ldr	r3, [pc, #12]	; (401418 <stdio_io_init+0x28>)
  40140a:	601e      	str	r6, [r3, #0]
  40140c:	bd70      	pop	{r4, r5, r6, pc}
  40140e:	bf00      	nop
  401410:	20400028 	.word	0x20400028
  401414:	00401525 	.word	0x00401525
  401418:	20400110 	.word	0x20400110

0040141c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
  40141c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  40141e:	4b06      	ldr	r3, [pc, #24]	; (401438 <stdio_io_read+0x1c>)
  401420:	681b      	ldr	r3, [r3, #0]
  401422:	b133      	cbz	r3, 401432 <stdio_io_read+0x16>
  401424:	460a      	mov	r2, r1
  401426:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
  401428:	b292      	uxth	r2, r2
  40142a:	4618      	mov	r0, r3
  40142c:	4b03      	ldr	r3, [pc, #12]	; (40143c <stdio_io_read+0x20>)
  40142e:	4798      	blx	r3
  401430:	bd08      	pop	{r3, pc}
		return 0;
  401432:	2000      	movs	r0, #0
}
  401434:	bd08      	pop	{r3, pc}
  401436:	bf00      	nop
  401438:	20400110 	.word	0x20400110
  40143c:	00400829 	.word	0x00400829

00401440 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
  401440:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
  401442:	4b06      	ldr	r3, [pc, #24]	; (40145c <stdio_io_write+0x1c>)
  401444:	681b      	ldr	r3, [r3, #0]
  401446:	b133      	cbz	r3, 401456 <stdio_io_write+0x16>
  401448:	460a      	mov	r2, r1
  40144a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
  40144c:	b292      	uxth	r2, r2
  40144e:	4618      	mov	r0, r3
  401450:	4b03      	ldr	r3, [pc, #12]	; (401460 <stdio_io_write+0x20>)
  401452:	4798      	blx	r3
  401454:	bd08      	pop	{r3, pc}
		return 0;
  401456:	2000      	movs	r0, #0
}
  401458:	bd08      	pop	{r3, pc}
  40145a:	bf00      	nop
  40145c:	20400110 	.word	0x20400110
  401460:	004007f9 	.word	0x004007f9

00401464 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
  401464:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
  401466:	4c04      	ldr	r4, [pc, #16]	; (401478 <stdio_redirect_init+0x14>)
  401468:	4620      	mov	r0, r4
  40146a:	4b04      	ldr	r3, [pc, #16]	; (40147c <stdio_redirect_init+0x18>)
  40146c:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
  40146e:	4620      	mov	r0, r4
  401470:	4b03      	ldr	r3, [pc, #12]	; (401480 <stdio_redirect_init+0x1c>)
  401472:	4798      	blx	r3
  401474:	bd10      	pop	{r4, pc}
  401476:	bf00      	nop
  401478:	20400144 	.word	0x20400144
  40147c:	00400971 	.word	0x00400971
  401480:	004013f1 	.word	0x004013f1

00401484 <__libc_init_array>:
  401484:	b570      	push	{r4, r5, r6, lr}
  401486:	4e0d      	ldr	r6, [pc, #52]	; (4014bc <__libc_init_array+0x38>)
  401488:	4c0d      	ldr	r4, [pc, #52]	; (4014c0 <__libc_init_array+0x3c>)
  40148a:	1ba4      	subs	r4, r4, r6
  40148c:	10a4      	asrs	r4, r4, #2
  40148e:	2500      	movs	r5, #0
  401490:	42a5      	cmp	r5, r4
  401492:	d109      	bne.n	4014a8 <__libc_init_array+0x24>
  401494:	4e0b      	ldr	r6, [pc, #44]	; (4014c4 <__libc_init_array+0x40>)
  401496:	4c0c      	ldr	r4, [pc, #48]	; (4014c8 <__libc_init_array+0x44>)
  401498:	f001 f8ee 	bl	402678 <_init>
  40149c:	1ba4      	subs	r4, r4, r6
  40149e:	10a4      	asrs	r4, r4, #2
  4014a0:	2500      	movs	r5, #0
  4014a2:	42a5      	cmp	r5, r4
  4014a4:	d105      	bne.n	4014b2 <__libc_init_array+0x2e>
  4014a6:	bd70      	pop	{r4, r5, r6, pc}
  4014a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4014ac:	4798      	blx	r3
  4014ae:	3501      	adds	r5, #1
  4014b0:	e7ee      	b.n	401490 <__libc_init_array+0xc>
  4014b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4014b6:	4798      	blx	r3
  4014b8:	3501      	adds	r5, #1
  4014ba:	e7f2      	b.n	4014a2 <__libc_init_array+0x1e>
  4014bc:	00402684 	.word	0x00402684
  4014c0:	00402684 	.word	0x00402684
  4014c4:	00402684 	.word	0x00402684
  4014c8:	00402688 	.word	0x00402688

004014cc <memcpy>:
  4014cc:	b510      	push	{r4, lr}
  4014ce:	1e43      	subs	r3, r0, #1
  4014d0:	440a      	add	r2, r1
  4014d2:	4291      	cmp	r1, r2
  4014d4:	d100      	bne.n	4014d8 <memcpy+0xc>
  4014d6:	bd10      	pop	{r4, pc}
  4014d8:	f811 4b01 	ldrb.w	r4, [r1], #1
  4014dc:	f803 4f01 	strb.w	r4, [r3, #1]!
  4014e0:	e7f7      	b.n	4014d2 <memcpy+0x6>

004014e2 <memset>:
  4014e2:	4402      	add	r2, r0
  4014e4:	4603      	mov	r3, r0
  4014e6:	4293      	cmp	r3, r2
  4014e8:	d100      	bne.n	4014ec <memset+0xa>
  4014ea:	4770      	bx	lr
  4014ec:	f803 1b01 	strb.w	r1, [r3], #1
  4014f0:	e7f9      	b.n	4014e6 <memset+0x4>
	...

004014f4 <iprintf>:
  4014f4:	b40f      	push	{r0, r1, r2, r3}
  4014f6:	4b0a      	ldr	r3, [pc, #40]	; (401520 <iprintf+0x2c>)
  4014f8:	b513      	push	{r0, r1, r4, lr}
  4014fa:	681c      	ldr	r4, [r3, #0]
  4014fc:	b124      	cbz	r4, 401508 <iprintf+0x14>
  4014fe:	69a3      	ldr	r3, [r4, #24]
  401500:	b913      	cbnz	r3, 401508 <iprintf+0x14>
  401502:	4620      	mov	r0, r4
  401504:	f000 fa76 	bl	4019f4 <__sinit>
  401508:	ab05      	add	r3, sp, #20
  40150a:	9a04      	ldr	r2, [sp, #16]
  40150c:	68a1      	ldr	r1, [r4, #8]
  40150e:	9301      	str	r3, [sp, #4]
  401510:	4620      	mov	r0, r4
  401512:	f000 fc39 	bl	401d88 <_vfiprintf_r>
  401516:	b002      	add	sp, #8
  401518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40151c:	b004      	add	sp, #16
  40151e:	4770      	bx	lr
  401520:	20400028 	.word	0x20400028

00401524 <setbuf>:
  401524:	2900      	cmp	r1, #0
  401526:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40152a:	bf0c      	ite	eq
  40152c:	2202      	moveq	r2, #2
  40152e:	2200      	movne	r2, #0
  401530:	f000 b800 	b.w	401534 <setvbuf>

00401534 <setvbuf>:
  401534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  401538:	461d      	mov	r5, r3
  40153a:	4b51      	ldr	r3, [pc, #324]	; (401680 <setvbuf+0x14c>)
  40153c:	681e      	ldr	r6, [r3, #0]
  40153e:	4604      	mov	r4, r0
  401540:	460f      	mov	r7, r1
  401542:	4690      	mov	r8, r2
  401544:	b126      	cbz	r6, 401550 <setvbuf+0x1c>
  401546:	69b3      	ldr	r3, [r6, #24]
  401548:	b913      	cbnz	r3, 401550 <setvbuf+0x1c>
  40154a:	4630      	mov	r0, r6
  40154c:	f000 fa52 	bl	4019f4 <__sinit>
  401550:	4b4c      	ldr	r3, [pc, #304]	; (401684 <setvbuf+0x150>)
  401552:	429c      	cmp	r4, r3
  401554:	d152      	bne.n	4015fc <setvbuf+0xc8>
  401556:	6874      	ldr	r4, [r6, #4]
  401558:	f1b8 0f02 	cmp.w	r8, #2
  40155c:	d006      	beq.n	40156c <setvbuf+0x38>
  40155e:	f1b8 0f01 	cmp.w	r8, #1
  401562:	f200 8089 	bhi.w	401678 <setvbuf+0x144>
  401566:	2d00      	cmp	r5, #0
  401568:	f2c0 8086 	blt.w	401678 <setvbuf+0x144>
  40156c:	4621      	mov	r1, r4
  40156e:	4630      	mov	r0, r6
  401570:	f000 f9d6 	bl	401920 <_fflush_r>
  401574:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401576:	b141      	cbz	r1, 40158a <setvbuf+0x56>
  401578:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40157c:	4299      	cmp	r1, r3
  40157e:	d002      	beq.n	401586 <setvbuf+0x52>
  401580:	4630      	mov	r0, r6
  401582:	f000 fb2d 	bl	401be0 <_free_r>
  401586:	2300      	movs	r3, #0
  401588:	6363      	str	r3, [r4, #52]	; 0x34
  40158a:	2300      	movs	r3, #0
  40158c:	61a3      	str	r3, [r4, #24]
  40158e:	6063      	str	r3, [r4, #4]
  401590:	89a3      	ldrh	r3, [r4, #12]
  401592:	061b      	lsls	r3, r3, #24
  401594:	d503      	bpl.n	40159e <setvbuf+0x6a>
  401596:	6921      	ldr	r1, [r4, #16]
  401598:	4630      	mov	r0, r6
  40159a:	f000 fb21 	bl	401be0 <_free_r>
  40159e:	89a3      	ldrh	r3, [r4, #12]
  4015a0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4015a4:	f023 0303 	bic.w	r3, r3, #3
  4015a8:	f1b8 0f02 	cmp.w	r8, #2
  4015ac:	81a3      	strh	r3, [r4, #12]
  4015ae:	d05d      	beq.n	40166c <setvbuf+0x138>
  4015b0:	ab01      	add	r3, sp, #4
  4015b2:	466a      	mov	r2, sp
  4015b4:	4621      	mov	r1, r4
  4015b6:	4630      	mov	r0, r6
  4015b8:	f000 faa6 	bl	401b08 <__swhatbuf_r>
  4015bc:	89a3      	ldrh	r3, [r4, #12]
  4015be:	4318      	orrs	r0, r3
  4015c0:	81a0      	strh	r0, [r4, #12]
  4015c2:	bb2d      	cbnz	r5, 401610 <setvbuf+0xdc>
  4015c4:	9d00      	ldr	r5, [sp, #0]
  4015c6:	4628      	mov	r0, r5
  4015c8:	f000 fb02 	bl	401bd0 <malloc>
  4015cc:	4607      	mov	r7, r0
  4015ce:	2800      	cmp	r0, #0
  4015d0:	d14e      	bne.n	401670 <setvbuf+0x13c>
  4015d2:	f8dd 9000 	ldr.w	r9, [sp]
  4015d6:	45a9      	cmp	r9, r5
  4015d8:	d13c      	bne.n	401654 <setvbuf+0x120>
  4015da:	f04f 30ff 	mov.w	r0, #4294967295
  4015de:	89a3      	ldrh	r3, [r4, #12]
  4015e0:	f043 0302 	orr.w	r3, r3, #2
  4015e4:	81a3      	strh	r3, [r4, #12]
  4015e6:	2300      	movs	r3, #0
  4015e8:	60a3      	str	r3, [r4, #8]
  4015ea:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4015ee:	6023      	str	r3, [r4, #0]
  4015f0:	6123      	str	r3, [r4, #16]
  4015f2:	2301      	movs	r3, #1
  4015f4:	6163      	str	r3, [r4, #20]
  4015f6:	b003      	add	sp, #12
  4015f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4015fc:	4b22      	ldr	r3, [pc, #136]	; (401688 <setvbuf+0x154>)
  4015fe:	429c      	cmp	r4, r3
  401600:	d101      	bne.n	401606 <setvbuf+0xd2>
  401602:	68b4      	ldr	r4, [r6, #8]
  401604:	e7a8      	b.n	401558 <setvbuf+0x24>
  401606:	4b21      	ldr	r3, [pc, #132]	; (40168c <setvbuf+0x158>)
  401608:	429c      	cmp	r4, r3
  40160a:	bf08      	it	eq
  40160c:	68f4      	ldreq	r4, [r6, #12]
  40160e:	e7a3      	b.n	401558 <setvbuf+0x24>
  401610:	2f00      	cmp	r7, #0
  401612:	d0d8      	beq.n	4015c6 <setvbuf+0x92>
  401614:	69b3      	ldr	r3, [r6, #24]
  401616:	b913      	cbnz	r3, 40161e <setvbuf+0xea>
  401618:	4630      	mov	r0, r6
  40161a:	f000 f9eb 	bl	4019f4 <__sinit>
  40161e:	f1b8 0f01 	cmp.w	r8, #1
  401622:	bf08      	it	eq
  401624:	89a3      	ldrheq	r3, [r4, #12]
  401626:	6027      	str	r7, [r4, #0]
  401628:	bf04      	itt	eq
  40162a:	f043 0301 	orreq.w	r3, r3, #1
  40162e:	81a3      	strheq	r3, [r4, #12]
  401630:	89a3      	ldrh	r3, [r4, #12]
  401632:	6127      	str	r7, [r4, #16]
  401634:	f013 0008 	ands.w	r0, r3, #8
  401638:	6165      	str	r5, [r4, #20]
  40163a:	d01b      	beq.n	401674 <setvbuf+0x140>
  40163c:	f013 0001 	ands.w	r0, r3, #1
  401640:	bf18      	it	ne
  401642:	426d      	negne	r5, r5
  401644:	f04f 0300 	mov.w	r3, #0
  401648:	bf1d      	ittte	ne
  40164a:	60a3      	strne	r3, [r4, #8]
  40164c:	61a5      	strne	r5, [r4, #24]
  40164e:	4618      	movne	r0, r3
  401650:	60a5      	streq	r5, [r4, #8]
  401652:	e7d0      	b.n	4015f6 <setvbuf+0xc2>
  401654:	4648      	mov	r0, r9
  401656:	f000 fabb 	bl	401bd0 <malloc>
  40165a:	4607      	mov	r7, r0
  40165c:	2800      	cmp	r0, #0
  40165e:	d0bc      	beq.n	4015da <setvbuf+0xa6>
  401660:	89a3      	ldrh	r3, [r4, #12]
  401662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401666:	81a3      	strh	r3, [r4, #12]
  401668:	464d      	mov	r5, r9
  40166a:	e7d3      	b.n	401614 <setvbuf+0xe0>
  40166c:	2000      	movs	r0, #0
  40166e:	e7b6      	b.n	4015de <setvbuf+0xaa>
  401670:	46a9      	mov	r9, r5
  401672:	e7f5      	b.n	401660 <setvbuf+0x12c>
  401674:	60a0      	str	r0, [r4, #8]
  401676:	e7be      	b.n	4015f6 <setvbuf+0xc2>
  401678:	f04f 30ff 	mov.w	r0, #4294967295
  40167c:	e7bb      	b.n	4015f6 <setvbuf+0xc2>
  40167e:	bf00      	nop
  401680:	20400028 	.word	0x20400028
  401684:	00402604 	.word	0x00402604
  401688:	00402624 	.word	0x00402624
  40168c:	004025e4 	.word	0x004025e4

00401690 <__swbuf_r>:
  401690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401692:	460e      	mov	r6, r1
  401694:	4614      	mov	r4, r2
  401696:	4605      	mov	r5, r0
  401698:	b118      	cbz	r0, 4016a2 <__swbuf_r+0x12>
  40169a:	6983      	ldr	r3, [r0, #24]
  40169c:	b90b      	cbnz	r3, 4016a2 <__swbuf_r+0x12>
  40169e:	f000 f9a9 	bl	4019f4 <__sinit>
  4016a2:	4b21      	ldr	r3, [pc, #132]	; (401728 <__swbuf_r+0x98>)
  4016a4:	429c      	cmp	r4, r3
  4016a6:	d12a      	bne.n	4016fe <__swbuf_r+0x6e>
  4016a8:	686c      	ldr	r4, [r5, #4]
  4016aa:	69a3      	ldr	r3, [r4, #24]
  4016ac:	60a3      	str	r3, [r4, #8]
  4016ae:	89a3      	ldrh	r3, [r4, #12]
  4016b0:	071a      	lsls	r2, r3, #28
  4016b2:	d52e      	bpl.n	401712 <__swbuf_r+0x82>
  4016b4:	6923      	ldr	r3, [r4, #16]
  4016b6:	b363      	cbz	r3, 401712 <__swbuf_r+0x82>
  4016b8:	6923      	ldr	r3, [r4, #16]
  4016ba:	6820      	ldr	r0, [r4, #0]
  4016bc:	1ac0      	subs	r0, r0, r3
  4016be:	6963      	ldr	r3, [r4, #20]
  4016c0:	b2f6      	uxtb	r6, r6
  4016c2:	4298      	cmp	r0, r3
  4016c4:	4637      	mov	r7, r6
  4016c6:	db04      	blt.n	4016d2 <__swbuf_r+0x42>
  4016c8:	4621      	mov	r1, r4
  4016ca:	4628      	mov	r0, r5
  4016cc:	f000 f928 	bl	401920 <_fflush_r>
  4016d0:	bb28      	cbnz	r0, 40171e <__swbuf_r+0x8e>
  4016d2:	68a3      	ldr	r3, [r4, #8]
  4016d4:	3b01      	subs	r3, #1
  4016d6:	60a3      	str	r3, [r4, #8]
  4016d8:	6823      	ldr	r3, [r4, #0]
  4016da:	1c5a      	adds	r2, r3, #1
  4016dc:	6022      	str	r2, [r4, #0]
  4016de:	701e      	strb	r6, [r3, #0]
  4016e0:	6963      	ldr	r3, [r4, #20]
  4016e2:	3001      	adds	r0, #1
  4016e4:	4298      	cmp	r0, r3
  4016e6:	d004      	beq.n	4016f2 <__swbuf_r+0x62>
  4016e8:	89a3      	ldrh	r3, [r4, #12]
  4016ea:	07db      	lsls	r3, r3, #31
  4016ec:	d519      	bpl.n	401722 <__swbuf_r+0x92>
  4016ee:	2e0a      	cmp	r6, #10
  4016f0:	d117      	bne.n	401722 <__swbuf_r+0x92>
  4016f2:	4621      	mov	r1, r4
  4016f4:	4628      	mov	r0, r5
  4016f6:	f000 f913 	bl	401920 <_fflush_r>
  4016fa:	b190      	cbz	r0, 401722 <__swbuf_r+0x92>
  4016fc:	e00f      	b.n	40171e <__swbuf_r+0x8e>
  4016fe:	4b0b      	ldr	r3, [pc, #44]	; (40172c <__swbuf_r+0x9c>)
  401700:	429c      	cmp	r4, r3
  401702:	d101      	bne.n	401708 <__swbuf_r+0x78>
  401704:	68ac      	ldr	r4, [r5, #8]
  401706:	e7d0      	b.n	4016aa <__swbuf_r+0x1a>
  401708:	4b09      	ldr	r3, [pc, #36]	; (401730 <__swbuf_r+0xa0>)
  40170a:	429c      	cmp	r4, r3
  40170c:	bf08      	it	eq
  40170e:	68ec      	ldreq	r4, [r5, #12]
  401710:	e7cb      	b.n	4016aa <__swbuf_r+0x1a>
  401712:	4621      	mov	r1, r4
  401714:	4628      	mov	r0, r5
  401716:	f000 f80d 	bl	401734 <__swsetup_r>
  40171a:	2800      	cmp	r0, #0
  40171c:	d0cc      	beq.n	4016b8 <__swbuf_r+0x28>
  40171e:	f04f 37ff 	mov.w	r7, #4294967295
  401722:	4638      	mov	r0, r7
  401724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401726:	bf00      	nop
  401728:	00402604 	.word	0x00402604
  40172c:	00402624 	.word	0x00402624
  401730:	004025e4 	.word	0x004025e4

00401734 <__swsetup_r>:
  401734:	4b32      	ldr	r3, [pc, #200]	; (401800 <__swsetup_r+0xcc>)
  401736:	b570      	push	{r4, r5, r6, lr}
  401738:	681d      	ldr	r5, [r3, #0]
  40173a:	4606      	mov	r6, r0
  40173c:	460c      	mov	r4, r1
  40173e:	b125      	cbz	r5, 40174a <__swsetup_r+0x16>
  401740:	69ab      	ldr	r3, [r5, #24]
  401742:	b913      	cbnz	r3, 40174a <__swsetup_r+0x16>
  401744:	4628      	mov	r0, r5
  401746:	f000 f955 	bl	4019f4 <__sinit>
  40174a:	4b2e      	ldr	r3, [pc, #184]	; (401804 <__swsetup_r+0xd0>)
  40174c:	429c      	cmp	r4, r3
  40174e:	d10f      	bne.n	401770 <__swsetup_r+0x3c>
  401750:	686c      	ldr	r4, [r5, #4]
  401752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401756:	b29a      	uxth	r2, r3
  401758:	0715      	lsls	r5, r2, #28
  40175a:	d42c      	bmi.n	4017b6 <__swsetup_r+0x82>
  40175c:	06d0      	lsls	r0, r2, #27
  40175e:	d411      	bmi.n	401784 <__swsetup_r+0x50>
  401760:	2209      	movs	r2, #9
  401762:	6032      	str	r2, [r6, #0]
  401764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401768:	81a3      	strh	r3, [r4, #12]
  40176a:	f04f 30ff 	mov.w	r0, #4294967295
  40176e:	bd70      	pop	{r4, r5, r6, pc}
  401770:	4b25      	ldr	r3, [pc, #148]	; (401808 <__swsetup_r+0xd4>)
  401772:	429c      	cmp	r4, r3
  401774:	d101      	bne.n	40177a <__swsetup_r+0x46>
  401776:	68ac      	ldr	r4, [r5, #8]
  401778:	e7eb      	b.n	401752 <__swsetup_r+0x1e>
  40177a:	4b24      	ldr	r3, [pc, #144]	; (40180c <__swsetup_r+0xd8>)
  40177c:	429c      	cmp	r4, r3
  40177e:	bf08      	it	eq
  401780:	68ec      	ldreq	r4, [r5, #12]
  401782:	e7e6      	b.n	401752 <__swsetup_r+0x1e>
  401784:	0751      	lsls	r1, r2, #29
  401786:	d512      	bpl.n	4017ae <__swsetup_r+0x7a>
  401788:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40178a:	b141      	cbz	r1, 40179e <__swsetup_r+0x6a>
  40178c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401790:	4299      	cmp	r1, r3
  401792:	d002      	beq.n	40179a <__swsetup_r+0x66>
  401794:	4630      	mov	r0, r6
  401796:	f000 fa23 	bl	401be0 <_free_r>
  40179a:	2300      	movs	r3, #0
  40179c:	6363      	str	r3, [r4, #52]	; 0x34
  40179e:	89a3      	ldrh	r3, [r4, #12]
  4017a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4017a4:	81a3      	strh	r3, [r4, #12]
  4017a6:	2300      	movs	r3, #0
  4017a8:	6063      	str	r3, [r4, #4]
  4017aa:	6923      	ldr	r3, [r4, #16]
  4017ac:	6023      	str	r3, [r4, #0]
  4017ae:	89a3      	ldrh	r3, [r4, #12]
  4017b0:	f043 0308 	orr.w	r3, r3, #8
  4017b4:	81a3      	strh	r3, [r4, #12]
  4017b6:	6923      	ldr	r3, [r4, #16]
  4017b8:	b94b      	cbnz	r3, 4017ce <__swsetup_r+0x9a>
  4017ba:	89a3      	ldrh	r3, [r4, #12]
  4017bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4017c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4017c4:	d003      	beq.n	4017ce <__swsetup_r+0x9a>
  4017c6:	4621      	mov	r1, r4
  4017c8:	4630      	mov	r0, r6
  4017ca:	f000 f9c1 	bl	401b50 <__smakebuf_r>
  4017ce:	89a2      	ldrh	r2, [r4, #12]
  4017d0:	f012 0301 	ands.w	r3, r2, #1
  4017d4:	d00c      	beq.n	4017f0 <__swsetup_r+0xbc>
  4017d6:	2300      	movs	r3, #0
  4017d8:	60a3      	str	r3, [r4, #8]
  4017da:	6963      	ldr	r3, [r4, #20]
  4017dc:	425b      	negs	r3, r3
  4017de:	61a3      	str	r3, [r4, #24]
  4017e0:	6923      	ldr	r3, [r4, #16]
  4017e2:	b953      	cbnz	r3, 4017fa <__swsetup_r+0xc6>
  4017e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4017e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
  4017ec:	d1ba      	bne.n	401764 <__swsetup_r+0x30>
  4017ee:	bd70      	pop	{r4, r5, r6, pc}
  4017f0:	0792      	lsls	r2, r2, #30
  4017f2:	bf58      	it	pl
  4017f4:	6963      	ldrpl	r3, [r4, #20]
  4017f6:	60a3      	str	r3, [r4, #8]
  4017f8:	e7f2      	b.n	4017e0 <__swsetup_r+0xac>
  4017fa:	2000      	movs	r0, #0
  4017fc:	e7f7      	b.n	4017ee <__swsetup_r+0xba>
  4017fe:	bf00      	nop
  401800:	20400028 	.word	0x20400028
  401804:	00402604 	.word	0x00402604
  401808:	00402624 	.word	0x00402624
  40180c:	004025e4 	.word	0x004025e4

00401810 <__sflush_r>:
  401810:	898a      	ldrh	r2, [r1, #12]
  401812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401816:	4605      	mov	r5, r0
  401818:	0710      	lsls	r0, r2, #28
  40181a:	460c      	mov	r4, r1
  40181c:	d45a      	bmi.n	4018d4 <__sflush_r+0xc4>
  40181e:	684b      	ldr	r3, [r1, #4]
  401820:	2b00      	cmp	r3, #0
  401822:	dc05      	bgt.n	401830 <__sflush_r+0x20>
  401824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  401826:	2b00      	cmp	r3, #0
  401828:	dc02      	bgt.n	401830 <__sflush_r+0x20>
  40182a:	2000      	movs	r0, #0
  40182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  401832:	2e00      	cmp	r6, #0
  401834:	d0f9      	beq.n	40182a <__sflush_r+0x1a>
  401836:	2300      	movs	r3, #0
  401838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
  40183c:	682f      	ldr	r7, [r5, #0]
  40183e:	602b      	str	r3, [r5, #0]
  401840:	d033      	beq.n	4018aa <__sflush_r+0x9a>
  401842:	6d60      	ldr	r0, [r4, #84]	; 0x54
  401844:	89a3      	ldrh	r3, [r4, #12]
  401846:	075a      	lsls	r2, r3, #29
  401848:	d505      	bpl.n	401856 <__sflush_r+0x46>
  40184a:	6863      	ldr	r3, [r4, #4]
  40184c:	1ac0      	subs	r0, r0, r3
  40184e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  401850:	b10b      	cbz	r3, 401856 <__sflush_r+0x46>
  401852:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401854:	1ac0      	subs	r0, r0, r3
  401856:	2300      	movs	r3, #0
  401858:	4602      	mov	r2, r0
  40185a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40185c:	6a21      	ldr	r1, [r4, #32]
  40185e:	4628      	mov	r0, r5
  401860:	47b0      	blx	r6
  401862:	1c43      	adds	r3, r0, #1
  401864:	89a3      	ldrh	r3, [r4, #12]
  401866:	d106      	bne.n	401876 <__sflush_r+0x66>
  401868:	6829      	ldr	r1, [r5, #0]
  40186a:	291d      	cmp	r1, #29
  40186c:	d84b      	bhi.n	401906 <__sflush_r+0xf6>
  40186e:	4a2b      	ldr	r2, [pc, #172]	; (40191c <__sflush_r+0x10c>)
  401870:	40ca      	lsrs	r2, r1
  401872:	07d6      	lsls	r6, r2, #31
  401874:	d547      	bpl.n	401906 <__sflush_r+0xf6>
  401876:	2200      	movs	r2, #0
  401878:	6062      	str	r2, [r4, #4]
  40187a:	04d9      	lsls	r1, r3, #19
  40187c:	6922      	ldr	r2, [r4, #16]
  40187e:	6022      	str	r2, [r4, #0]
  401880:	d504      	bpl.n	40188c <__sflush_r+0x7c>
  401882:	1c42      	adds	r2, r0, #1
  401884:	d101      	bne.n	40188a <__sflush_r+0x7a>
  401886:	682b      	ldr	r3, [r5, #0]
  401888:	b903      	cbnz	r3, 40188c <__sflush_r+0x7c>
  40188a:	6560      	str	r0, [r4, #84]	; 0x54
  40188c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40188e:	602f      	str	r7, [r5, #0]
  401890:	2900      	cmp	r1, #0
  401892:	d0ca      	beq.n	40182a <__sflush_r+0x1a>
  401894:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401898:	4299      	cmp	r1, r3
  40189a:	d002      	beq.n	4018a2 <__sflush_r+0x92>
  40189c:	4628      	mov	r0, r5
  40189e:	f000 f99f 	bl	401be0 <_free_r>
  4018a2:	2000      	movs	r0, #0
  4018a4:	6360      	str	r0, [r4, #52]	; 0x34
  4018a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018aa:	6a21      	ldr	r1, [r4, #32]
  4018ac:	2301      	movs	r3, #1
  4018ae:	4628      	mov	r0, r5
  4018b0:	47b0      	blx	r6
  4018b2:	1c41      	adds	r1, r0, #1
  4018b4:	d1c6      	bne.n	401844 <__sflush_r+0x34>
  4018b6:	682b      	ldr	r3, [r5, #0]
  4018b8:	2b00      	cmp	r3, #0
  4018ba:	d0c3      	beq.n	401844 <__sflush_r+0x34>
  4018bc:	2b1d      	cmp	r3, #29
  4018be:	d001      	beq.n	4018c4 <__sflush_r+0xb4>
  4018c0:	2b16      	cmp	r3, #22
  4018c2:	d101      	bne.n	4018c8 <__sflush_r+0xb8>
  4018c4:	602f      	str	r7, [r5, #0]
  4018c6:	e7b0      	b.n	40182a <__sflush_r+0x1a>
  4018c8:	89a3      	ldrh	r3, [r4, #12]
  4018ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4018ce:	81a3      	strh	r3, [r4, #12]
  4018d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018d4:	690f      	ldr	r7, [r1, #16]
  4018d6:	2f00      	cmp	r7, #0
  4018d8:	d0a7      	beq.n	40182a <__sflush_r+0x1a>
  4018da:	0793      	lsls	r3, r2, #30
  4018dc:	680e      	ldr	r6, [r1, #0]
  4018de:	bf08      	it	eq
  4018e0:	694b      	ldreq	r3, [r1, #20]
  4018e2:	600f      	str	r7, [r1, #0]
  4018e4:	bf18      	it	ne
  4018e6:	2300      	movne	r3, #0
  4018e8:	eba6 0807 	sub.w	r8, r6, r7
  4018ec:	608b      	str	r3, [r1, #8]
  4018ee:	f1b8 0f00 	cmp.w	r8, #0
  4018f2:	dd9a      	ble.n	40182a <__sflush_r+0x1a>
  4018f4:	4643      	mov	r3, r8
  4018f6:	463a      	mov	r2, r7
  4018f8:	6a21      	ldr	r1, [r4, #32]
  4018fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4018fc:	4628      	mov	r0, r5
  4018fe:	47b0      	blx	r6
  401900:	2800      	cmp	r0, #0
  401902:	dc07      	bgt.n	401914 <__sflush_r+0x104>
  401904:	89a3      	ldrh	r3, [r4, #12]
  401906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40190a:	81a3      	strh	r3, [r4, #12]
  40190c:	f04f 30ff 	mov.w	r0, #4294967295
  401910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401914:	4407      	add	r7, r0
  401916:	eba8 0800 	sub.w	r8, r8, r0
  40191a:	e7e8      	b.n	4018ee <__sflush_r+0xde>
  40191c:	20400001 	.word	0x20400001

00401920 <_fflush_r>:
  401920:	b538      	push	{r3, r4, r5, lr}
  401922:	690b      	ldr	r3, [r1, #16]
  401924:	4605      	mov	r5, r0
  401926:	460c      	mov	r4, r1
  401928:	b1db      	cbz	r3, 401962 <_fflush_r+0x42>
  40192a:	b118      	cbz	r0, 401934 <_fflush_r+0x14>
  40192c:	6983      	ldr	r3, [r0, #24]
  40192e:	b90b      	cbnz	r3, 401934 <_fflush_r+0x14>
  401930:	f000 f860 	bl	4019f4 <__sinit>
  401934:	4b0c      	ldr	r3, [pc, #48]	; (401968 <_fflush_r+0x48>)
  401936:	429c      	cmp	r4, r3
  401938:	d109      	bne.n	40194e <_fflush_r+0x2e>
  40193a:	686c      	ldr	r4, [r5, #4]
  40193c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401940:	b17b      	cbz	r3, 401962 <_fflush_r+0x42>
  401942:	4621      	mov	r1, r4
  401944:	4628      	mov	r0, r5
  401946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40194a:	f7ff bf61 	b.w	401810 <__sflush_r>
  40194e:	4b07      	ldr	r3, [pc, #28]	; (40196c <_fflush_r+0x4c>)
  401950:	429c      	cmp	r4, r3
  401952:	d101      	bne.n	401958 <_fflush_r+0x38>
  401954:	68ac      	ldr	r4, [r5, #8]
  401956:	e7f1      	b.n	40193c <_fflush_r+0x1c>
  401958:	4b05      	ldr	r3, [pc, #20]	; (401970 <_fflush_r+0x50>)
  40195a:	429c      	cmp	r4, r3
  40195c:	bf08      	it	eq
  40195e:	68ec      	ldreq	r4, [r5, #12]
  401960:	e7ec      	b.n	40193c <_fflush_r+0x1c>
  401962:	2000      	movs	r0, #0
  401964:	bd38      	pop	{r3, r4, r5, pc}
  401966:	bf00      	nop
  401968:	00402604 	.word	0x00402604
  40196c:	00402624 	.word	0x00402624
  401970:	004025e4 	.word	0x004025e4

00401974 <_cleanup_r>:
  401974:	4901      	ldr	r1, [pc, #4]	; (40197c <_cleanup_r+0x8>)
  401976:	f000 b8a9 	b.w	401acc <_fwalk_reent>
  40197a:	bf00      	nop
  40197c:	00401921 	.word	0x00401921

00401980 <std.isra.0>:
  401980:	2300      	movs	r3, #0
  401982:	b510      	push	{r4, lr}
  401984:	4604      	mov	r4, r0
  401986:	6003      	str	r3, [r0, #0]
  401988:	6043      	str	r3, [r0, #4]
  40198a:	6083      	str	r3, [r0, #8]
  40198c:	8181      	strh	r1, [r0, #12]
  40198e:	6643      	str	r3, [r0, #100]	; 0x64
  401990:	81c2      	strh	r2, [r0, #14]
  401992:	6103      	str	r3, [r0, #16]
  401994:	6143      	str	r3, [r0, #20]
  401996:	6183      	str	r3, [r0, #24]
  401998:	4619      	mov	r1, r3
  40199a:	2208      	movs	r2, #8
  40199c:	305c      	adds	r0, #92	; 0x5c
  40199e:	f7ff fda0 	bl	4014e2 <memset>
  4019a2:	4b05      	ldr	r3, [pc, #20]	; (4019b8 <std.isra.0+0x38>)
  4019a4:	6263      	str	r3, [r4, #36]	; 0x24
  4019a6:	4b05      	ldr	r3, [pc, #20]	; (4019bc <std.isra.0+0x3c>)
  4019a8:	62a3      	str	r3, [r4, #40]	; 0x28
  4019aa:	4b05      	ldr	r3, [pc, #20]	; (4019c0 <std.isra.0+0x40>)
  4019ac:	62e3      	str	r3, [r4, #44]	; 0x2c
  4019ae:	4b05      	ldr	r3, [pc, #20]	; (4019c4 <std.isra.0+0x44>)
  4019b0:	6224      	str	r4, [r4, #32]
  4019b2:	6323      	str	r3, [r4, #48]	; 0x30
  4019b4:	bd10      	pop	{r4, pc}
  4019b6:	bf00      	nop
  4019b8:	00402301 	.word	0x00402301
  4019bc:	00402323 	.word	0x00402323
  4019c0:	0040235b 	.word	0x0040235b
  4019c4:	0040237f 	.word	0x0040237f

004019c8 <__sfmoreglue>:
  4019c8:	b570      	push	{r4, r5, r6, lr}
  4019ca:	1e4a      	subs	r2, r1, #1
  4019cc:	2568      	movs	r5, #104	; 0x68
  4019ce:	4355      	muls	r5, r2
  4019d0:	460e      	mov	r6, r1
  4019d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4019d6:	f000 f951 	bl	401c7c <_malloc_r>
  4019da:	4604      	mov	r4, r0
  4019dc:	b140      	cbz	r0, 4019f0 <__sfmoreglue+0x28>
  4019de:	2100      	movs	r1, #0
  4019e0:	e880 0042 	stmia.w	r0, {r1, r6}
  4019e4:	300c      	adds	r0, #12
  4019e6:	60a0      	str	r0, [r4, #8]
  4019e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4019ec:	f7ff fd79 	bl	4014e2 <memset>
  4019f0:	4620      	mov	r0, r4
  4019f2:	bd70      	pop	{r4, r5, r6, pc}

004019f4 <__sinit>:
  4019f4:	6983      	ldr	r3, [r0, #24]
  4019f6:	b510      	push	{r4, lr}
  4019f8:	4604      	mov	r4, r0
  4019fa:	bb33      	cbnz	r3, 401a4a <__sinit+0x56>
  4019fc:	6483      	str	r3, [r0, #72]	; 0x48
  4019fe:	64c3      	str	r3, [r0, #76]	; 0x4c
  401a00:	6503      	str	r3, [r0, #80]	; 0x50
  401a02:	4b12      	ldr	r3, [pc, #72]	; (401a4c <__sinit+0x58>)
  401a04:	4a12      	ldr	r2, [pc, #72]	; (401a50 <__sinit+0x5c>)
  401a06:	681b      	ldr	r3, [r3, #0]
  401a08:	6282      	str	r2, [r0, #40]	; 0x28
  401a0a:	4298      	cmp	r0, r3
  401a0c:	bf04      	itt	eq
  401a0e:	2301      	moveq	r3, #1
  401a10:	6183      	streq	r3, [r0, #24]
  401a12:	f000 f81f 	bl	401a54 <__sfp>
  401a16:	6060      	str	r0, [r4, #4]
  401a18:	4620      	mov	r0, r4
  401a1a:	f000 f81b 	bl	401a54 <__sfp>
  401a1e:	60a0      	str	r0, [r4, #8]
  401a20:	4620      	mov	r0, r4
  401a22:	f000 f817 	bl	401a54 <__sfp>
  401a26:	2200      	movs	r2, #0
  401a28:	60e0      	str	r0, [r4, #12]
  401a2a:	2104      	movs	r1, #4
  401a2c:	6860      	ldr	r0, [r4, #4]
  401a2e:	f7ff ffa7 	bl	401980 <std.isra.0>
  401a32:	2201      	movs	r2, #1
  401a34:	2109      	movs	r1, #9
  401a36:	68a0      	ldr	r0, [r4, #8]
  401a38:	f7ff ffa2 	bl	401980 <std.isra.0>
  401a3c:	2202      	movs	r2, #2
  401a3e:	2112      	movs	r1, #18
  401a40:	68e0      	ldr	r0, [r4, #12]
  401a42:	f7ff ff9d 	bl	401980 <std.isra.0>
  401a46:	2301      	movs	r3, #1
  401a48:	61a3      	str	r3, [r4, #24]
  401a4a:	bd10      	pop	{r4, pc}
  401a4c:	004025e0 	.word	0x004025e0
  401a50:	00401975 	.word	0x00401975

00401a54 <__sfp>:
  401a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401a56:	4b1c      	ldr	r3, [pc, #112]	; (401ac8 <__sfp+0x74>)
  401a58:	681e      	ldr	r6, [r3, #0]
  401a5a:	69b3      	ldr	r3, [r6, #24]
  401a5c:	4607      	mov	r7, r0
  401a5e:	b913      	cbnz	r3, 401a66 <__sfp+0x12>
  401a60:	4630      	mov	r0, r6
  401a62:	f7ff ffc7 	bl	4019f4 <__sinit>
  401a66:	3648      	adds	r6, #72	; 0x48
  401a68:	68b4      	ldr	r4, [r6, #8]
  401a6a:	6873      	ldr	r3, [r6, #4]
  401a6c:	3b01      	subs	r3, #1
  401a6e:	d503      	bpl.n	401a78 <__sfp+0x24>
  401a70:	6833      	ldr	r3, [r6, #0]
  401a72:	b133      	cbz	r3, 401a82 <__sfp+0x2e>
  401a74:	6836      	ldr	r6, [r6, #0]
  401a76:	e7f7      	b.n	401a68 <__sfp+0x14>
  401a78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  401a7c:	b16d      	cbz	r5, 401a9a <__sfp+0x46>
  401a7e:	3468      	adds	r4, #104	; 0x68
  401a80:	e7f4      	b.n	401a6c <__sfp+0x18>
  401a82:	2104      	movs	r1, #4
  401a84:	4638      	mov	r0, r7
  401a86:	f7ff ff9f 	bl	4019c8 <__sfmoreglue>
  401a8a:	6030      	str	r0, [r6, #0]
  401a8c:	2800      	cmp	r0, #0
  401a8e:	d1f1      	bne.n	401a74 <__sfp+0x20>
  401a90:	230c      	movs	r3, #12
  401a92:	603b      	str	r3, [r7, #0]
  401a94:	4604      	mov	r4, r0
  401a96:	4620      	mov	r0, r4
  401a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401a9e:	81e3      	strh	r3, [r4, #14]
  401aa0:	2301      	movs	r3, #1
  401aa2:	81a3      	strh	r3, [r4, #12]
  401aa4:	6665      	str	r5, [r4, #100]	; 0x64
  401aa6:	6025      	str	r5, [r4, #0]
  401aa8:	60a5      	str	r5, [r4, #8]
  401aaa:	6065      	str	r5, [r4, #4]
  401aac:	6125      	str	r5, [r4, #16]
  401aae:	6165      	str	r5, [r4, #20]
  401ab0:	61a5      	str	r5, [r4, #24]
  401ab2:	2208      	movs	r2, #8
  401ab4:	4629      	mov	r1, r5
  401ab6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  401aba:	f7ff fd12 	bl	4014e2 <memset>
  401abe:	6365      	str	r5, [r4, #52]	; 0x34
  401ac0:	63a5      	str	r5, [r4, #56]	; 0x38
  401ac2:	64a5      	str	r5, [r4, #72]	; 0x48
  401ac4:	64e5      	str	r5, [r4, #76]	; 0x4c
  401ac6:	e7e6      	b.n	401a96 <__sfp+0x42>
  401ac8:	004025e0 	.word	0x004025e0

00401acc <_fwalk_reent>:
  401acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401ad0:	4680      	mov	r8, r0
  401ad2:	4689      	mov	r9, r1
  401ad4:	f100 0448 	add.w	r4, r0, #72	; 0x48
  401ad8:	2600      	movs	r6, #0
  401ada:	b914      	cbnz	r4, 401ae2 <_fwalk_reent+0x16>
  401adc:	4630      	mov	r0, r6
  401ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ae2:	68a5      	ldr	r5, [r4, #8]
  401ae4:	6867      	ldr	r7, [r4, #4]
  401ae6:	3f01      	subs	r7, #1
  401ae8:	d501      	bpl.n	401aee <_fwalk_reent+0x22>
  401aea:	6824      	ldr	r4, [r4, #0]
  401aec:	e7f5      	b.n	401ada <_fwalk_reent+0xe>
  401aee:	89ab      	ldrh	r3, [r5, #12]
  401af0:	2b01      	cmp	r3, #1
  401af2:	d907      	bls.n	401b04 <_fwalk_reent+0x38>
  401af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  401af8:	3301      	adds	r3, #1
  401afa:	d003      	beq.n	401b04 <_fwalk_reent+0x38>
  401afc:	4629      	mov	r1, r5
  401afe:	4640      	mov	r0, r8
  401b00:	47c8      	blx	r9
  401b02:	4306      	orrs	r6, r0
  401b04:	3568      	adds	r5, #104	; 0x68
  401b06:	e7ee      	b.n	401ae6 <_fwalk_reent+0x1a>

00401b08 <__swhatbuf_r>:
  401b08:	b570      	push	{r4, r5, r6, lr}
  401b0a:	460e      	mov	r6, r1
  401b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401b10:	2900      	cmp	r1, #0
  401b12:	b090      	sub	sp, #64	; 0x40
  401b14:	4614      	mov	r4, r2
  401b16:	461d      	mov	r5, r3
  401b18:	da07      	bge.n	401b2a <__swhatbuf_r+0x22>
  401b1a:	2300      	movs	r3, #0
  401b1c:	602b      	str	r3, [r5, #0]
  401b1e:	89b3      	ldrh	r3, [r6, #12]
  401b20:	061a      	lsls	r2, r3, #24
  401b22:	d410      	bmi.n	401b46 <__swhatbuf_r+0x3e>
  401b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401b28:	e00e      	b.n	401b48 <__swhatbuf_r+0x40>
  401b2a:	aa01      	add	r2, sp, #4
  401b2c:	f000 fc4e 	bl	4023cc <_fstat_r>
  401b30:	2800      	cmp	r0, #0
  401b32:	dbf2      	blt.n	401b1a <__swhatbuf_r+0x12>
  401b34:	9a02      	ldr	r2, [sp, #8]
  401b36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401b3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  401b3e:	425a      	negs	r2, r3
  401b40:	415a      	adcs	r2, r3
  401b42:	602a      	str	r2, [r5, #0]
  401b44:	e7ee      	b.n	401b24 <__swhatbuf_r+0x1c>
  401b46:	2340      	movs	r3, #64	; 0x40
  401b48:	2000      	movs	r0, #0
  401b4a:	6023      	str	r3, [r4, #0]
  401b4c:	b010      	add	sp, #64	; 0x40
  401b4e:	bd70      	pop	{r4, r5, r6, pc}

00401b50 <__smakebuf_r>:
  401b50:	898b      	ldrh	r3, [r1, #12]
  401b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
  401b54:	079d      	lsls	r5, r3, #30
  401b56:	4606      	mov	r6, r0
  401b58:	460c      	mov	r4, r1
  401b5a:	d507      	bpl.n	401b6c <__smakebuf_r+0x1c>
  401b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401b60:	6023      	str	r3, [r4, #0]
  401b62:	6123      	str	r3, [r4, #16]
  401b64:	2301      	movs	r3, #1
  401b66:	6163      	str	r3, [r4, #20]
  401b68:	b002      	add	sp, #8
  401b6a:	bd70      	pop	{r4, r5, r6, pc}
  401b6c:	ab01      	add	r3, sp, #4
  401b6e:	466a      	mov	r2, sp
  401b70:	f7ff ffca 	bl	401b08 <__swhatbuf_r>
  401b74:	9900      	ldr	r1, [sp, #0]
  401b76:	4605      	mov	r5, r0
  401b78:	4630      	mov	r0, r6
  401b7a:	f000 f87f 	bl	401c7c <_malloc_r>
  401b7e:	b948      	cbnz	r0, 401b94 <__smakebuf_r+0x44>
  401b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401b84:	059a      	lsls	r2, r3, #22
  401b86:	d4ef      	bmi.n	401b68 <__smakebuf_r+0x18>
  401b88:	f023 0303 	bic.w	r3, r3, #3
  401b8c:	f043 0302 	orr.w	r3, r3, #2
  401b90:	81a3      	strh	r3, [r4, #12]
  401b92:	e7e3      	b.n	401b5c <__smakebuf_r+0xc>
  401b94:	4b0d      	ldr	r3, [pc, #52]	; (401bcc <__smakebuf_r+0x7c>)
  401b96:	62b3      	str	r3, [r6, #40]	; 0x28
  401b98:	89a3      	ldrh	r3, [r4, #12]
  401b9a:	6020      	str	r0, [r4, #0]
  401b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401ba0:	81a3      	strh	r3, [r4, #12]
  401ba2:	9b00      	ldr	r3, [sp, #0]
  401ba4:	6163      	str	r3, [r4, #20]
  401ba6:	9b01      	ldr	r3, [sp, #4]
  401ba8:	6120      	str	r0, [r4, #16]
  401baa:	b15b      	cbz	r3, 401bc4 <__smakebuf_r+0x74>
  401bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401bb0:	4630      	mov	r0, r6
  401bb2:	f000 fc1d 	bl	4023f0 <_isatty_r>
  401bb6:	b128      	cbz	r0, 401bc4 <__smakebuf_r+0x74>
  401bb8:	89a3      	ldrh	r3, [r4, #12]
  401bba:	f023 0303 	bic.w	r3, r3, #3
  401bbe:	f043 0301 	orr.w	r3, r3, #1
  401bc2:	81a3      	strh	r3, [r4, #12]
  401bc4:	89a3      	ldrh	r3, [r4, #12]
  401bc6:	431d      	orrs	r5, r3
  401bc8:	81a5      	strh	r5, [r4, #12]
  401bca:	e7cd      	b.n	401b68 <__smakebuf_r+0x18>
  401bcc:	00401975 	.word	0x00401975

00401bd0 <malloc>:
  401bd0:	4b02      	ldr	r3, [pc, #8]	; (401bdc <malloc+0xc>)
  401bd2:	4601      	mov	r1, r0
  401bd4:	6818      	ldr	r0, [r3, #0]
  401bd6:	f000 b851 	b.w	401c7c <_malloc_r>
  401bda:	bf00      	nop
  401bdc:	20400028 	.word	0x20400028

00401be0 <_free_r>:
  401be0:	b538      	push	{r3, r4, r5, lr}
  401be2:	4605      	mov	r5, r0
  401be4:	2900      	cmp	r1, #0
  401be6:	d045      	beq.n	401c74 <_free_r+0x94>
  401be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
  401bec:	1f0c      	subs	r4, r1, #4
  401bee:	2b00      	cmp	r3, #0
  401bf0:	bfb8      	it	lt
  401bf2:	18e4      	addlt	r4, r4, r3
  401bf4:	f000 fc74 	bl	4024e0 <__malloc_lock>
  401bf8:	4a1f      	ldr	r2, [pc, #124]	; (401c78 <_free_r+0x98>)
  401bfa:	6813      	ldr	r3, [r2, #0]
  401bfc:	4610      	mov	r0, r2
  401bfe:	b933      	cbnz	r3, 401c0e <_free_r+0x2e>
  401c00:	6063      	str	r3, [r4, #4]
  401c02:	6014      	str	r4, [r2, #0]
  401c04:	4628      	mov	r0, r5
  401c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401c0a:	f000 bc6a 	b.w	4024e2 <__malloc_unlock>
  401c0e:	42a3      	cmp	r3, r4
  401c10:	d90c      	bls.n	401c2c <_free_r+0x4c>
  401c12:	6821      	ldr	r1, [r4, #0]
  401c14:	1862      	adds	r2, r4, r1
  401c16:	4293      	cmp	r3, r2
  401c18:	bf04      	itt	eq
  401c1a:	681a      	ldreq	r2, [r3, #0]
  401c1c:	685b      	ldreq	r3, [r3, #4]
  401c1e:	6063      	str	r3, [r4, #4]
  401c20:	bf04      	itt	eq
  401c22:	1852      	addeq	r2, r2, r1
  401c24:	6022      	streq	r2, [r4, #0]
  401c26:	6004      	str	r4, [r0, #0]
  401c28:	e7ec      	b.n	401c04 <_free_r+0x24>
  401c2a:	4613      	mov	r3, r2
  401c2c:	685a      	ldr	r2, [r3, #4]
  401c2e:	b10a      	cbz	r2, 401c34 <_free_r+0x54>
  401c30:	42a2      	cmp	r2, r4
  401c32:	d9fa      	bls.n	401c2a <_free_r+0x4a>
  401c34:	6819      	ldr	r1, [r3, #0]
  401c36:	1858      	adds	r0, r3, r1
  401c38:	42a0      	cmp	r0, r4
  401c3a:	d10b      	bne.n	401c54 <_free_r+0x74>
  401c3c:	6820      	ldr	r0, [r4, #0]
  401c3e:	4401      	add	r1, r0
  401c40:	1858      	adds	r0, r3, r1
  401c42:	4282      	cmp	r2, r0
  401c44:	6019      	str	r1, [r3, #0]
  401c46:	d1dd      	bne.n	401c04 <_free_r+0x24>
  401c48:	6810      	ldr	r0, [r2, #0]
  401c4a:	6852      	ldr	r2, [r2, #4]
  401c4c:	605a      	str	r2, [r3, #4]
  401c4e:	4401      	add	r1, r0
  401c50:	6019      	str	r1, [r3, #0]
  401c52:	e7d7      	b.n	401c04 <_free_r+0x24>
  401c54:	d902      	bls.n	401c5c <_free_r+0x7c>
  401c56:	230c      	movs	r3, #12
  401c58:	602b      	str	r3, [r5, #0]
  401c5a:	e7d3      	b.n	401c04 <_free_r+0x24>
  401c5c:	6820      	ldr	r0, [r4, #0]
  401c5e:	1821      	adds	r1, r4, r0
  401c60:	428a      	cmp	r2, r1
  401c62:	bf04      	itt	eq
  401c64:	6811      	ldreq	r1, [r2, #0]
  401c66:	6852      	ldreq	r2, [r2, #4]
  401c68:	6062      	str	r2, [r4, #4]
  401c6a:	bf04      	itt	eq
  401c6c:	1809      	addeq	r1, r1, r0
  401c6e:	6021      	streq	r1, [r4, #0]
  401c70:	605c      	str	r4, [r3, #4]
  401c72:	e7c7      	b.n	401c04 <_free_r+0x24>
  401c74:	bd38      	pop	{r3, r4, r5, pc}
  401c76:	bf00      	nop
  401c78:	20400114 	.word	0x20400114

00401c7c <_malloc_r>:
  401c7c:	b570      	push	{r4, r5, r6, lr}
  401c7e:	1ccd      	adds	r5, r1, #3
  401c80:	f025 0503 	bic.w	r5, r5, #3
  401c84:	3508      	adds	r5, #8
  401c86:	2d0c      	cmp	r5, #12
  401c88:	bf38      	it	cc
  401c8a:	250c      	movcc	r5, #12
  401c8c:	2d00      	cmp	r5, #0
  401c8e:	4606      	mov	r6, r0
  401c90:	db01      	blt.n	401c96 <_malloc_r+0x1a>
  401c92:	42a9      	cmp	r1, r5
  401c94:	d903      	bls.n	401c9e <_malloc_r+0x22>
  401c96:	230c      	movs	r3, #12
  401c98:	6033      	str	r3, [r6, #0]
  401c9a:	2000      	movs	r0, #0
  401c9c:	bd70      	pop	{r4, r5, r6, pc}
  401c9e:	f000 fc1f 	bl	4024e0 <__malloc_lock>
  401ca2:	4a23      	ldr	r2, [pc, #140]	; (401d30 <_malloc_r+0xb4>)
  401ca4:	6814      	ldr	r4, [r2, #0]
  401ca6:	4621      	mov	r1, r4
  401ca8:	b991      	cbnz	r1, 401cd0 <_malloc_r+0x54>
  401caa:	4c22      	ldr	r4, [pc, #136]	; (401d34 <_malloc_r+0xb8>)
  401cac:	6823      	ldr	r3, [r4, #0]
  401cae:	b91b      	cbnz	r3, 401cb8 <_malloc_r+0x3c>
  401cb0:	4630      	mov	r0, r6
  401cb2:	f000 fb15 	bl	4022e0 <_sbrk_r>
  401cb6:	6020      	str	r0, [r4, #0]
  401cb8:	4629      	mov	r1, r5
  401cba:	4630      	mov	r0, r6
  401cbc:	f000 fb10 	bl	4022e0 <_sbrk_r>
  401cc0:	1c43      	adds	r3, r0, #1
  401cc2:	d126      	bne.n	401d12 <_malloc_r+0x96>
  401cc4:	230c      	movs	r3, #12
  401cc6:	6033      	str	r3, [r6, #0]
  401cc8:	4630      	mov	r0, r6
  401cca:	f000 fc0a 	bl	4024e2 <__malloc_unlock>
  401cce:	e7e4      	b.n	401c9a <_malloc_r+0x1e>
  401cd0:	680b      	ldr	r3, [r1, #0]
  401cd2:	1b5b      	subs	r3, r3, r5
  401cd4:	d41a      	bmi.n	401d0c <_malloc_r+0x90>
  401cd6:	2b0b      	cmp	r3, #11
  401cd8:	d90f      	bls.n	401cfa <_malloc_r+0x7e>
  401cda:	600b      	str	r3, [r1, #0]
  401cdc:	50cd      	str	r5, [r1, r3]
  401cde:	18cc      	adds	r4, r1, r3
  401ce0:	4630      	mov	r0, r6
  401ce2:	f000 fbfe 	bl	4024e2 <__malloc_unlock>
  401ce6:	f104 000b 	add.w	r0, r4, #11
  401cea:	1d23      	adds	r3, r4, #4
  401cec:	f020 0007 	bic.w	r0, r0, #7
  401cf0:	1ac3      	subs	r3, r0, r3
  401cf2:	d01b      	beq.n	401d2c <_malloc_r+0xb0>
  401cf4:	425a      	negs	r2, r3
  401cf6:	50e2      	str	r2, [r4, r3]
  401cf8:	bd70      	pop	{r4, r5, r6, pc}
  401cfa:	428c      	cmp	r4, r1
  401cfc:	bf0d      	iteet	eq
  401cfe:	6863      	ldreq	r3, [r4, #4]
  401d00:	684b      	ldrne	r3, [r1, #4]
  401d02:	6063      	strne	r3, [r4, #4]
  401d04:	6013      	streq	r3, [r2, #0]
  401d06:	bf18      	it	ne
  401d08:	460c      	movne	r4, r1
  401d0a:	e7e9      	b.n	401ce0 <_malloc_r+0x64>
  401d0c:	460c      	mov	r4, r1
  401d0e:	6849      	ldr	r1, [r1, #4]
  401d10:	e7ca      	b.n	401ca8 <_malloc_r+0x2c>
  401d12:	1cc4      	adds	r4, r0, #3
  401d14:	f024 0403 	bic.w	r4, r4, #3
  401d18:	42a0      	cmp	r0, r4
  401d1a:	d005      	beq.n	401d28 <_malloc_r+0xac>
  401d1c:	1a21      	subs	r1, r4, r0
  401d1e:	4630      	mov	r0, r6
  401d20:	f000 fade 	bl	4022e0 <_sbrk_r>
  401d24:	3001      	adds	r0, #1
  401d26:	d0cd      	beq.n	401cc4 <_malloc_r+0x48>
  401d28:	6025      	str	r5, [r4, #0]
  401d2a:	e7d9      	b.n	401ce0 <_malloc_r+0x64>
  401d2c:	bd70      	pop	{r4, r5, r6, pc}
  401d2e:	bf00      	nop
  401d30:	20400114 	.word	0x20400114
  401d34:	20400118 	.word	0x20400118

00401d38 <__sfputc_r>:
  401d38:	6893      	ldr	r3, [r2, #8]
  401d3a:	3b01      	subs	r3, #1
  401d3c:	2b00      	cmp	r3, #0
  401d3e:	b410      	push	{r4}
  401d40:	6093      	str	r3, [r2, #8]
  401d42:	da08      	bge.n	401d56 <__sfputc_r+0x1e>
  401d44:	6994      	ldr	r4, [r2, #24]
  401d46:	42a3      	cmp	r3, r4
  401d48:	db02      	blt.n	401d50 <__sfputc_r+0x18>
  401d4a:	b2cb      	uxtb	r3, r1
  401d4c:	2b0a      	cmp	r3, #10
  401d4e:	d102      	bne.n	401d56 <__sfputc_r+0x1e>
  401d50:	bc10      	pop	{r4}
  401d52:	f7ff bc9d 	b.w	401690 <__swbuf_r>
  401d56:	6813      	ldr	r3, [r2, #0]
  401d58:	1c58      	adds	r0, r3, #1
  401d5a:	6010      	str	r0, [r2, #0]
  401d5c:	7019      	strb	r1, [r3, #0]
  401d5e:	b2c8      	uxtb	r0, r1
  401d60:	bc10      	pop	{r4}
  401d62:	4770      	bx	lr

00401d64 <__sfputs_r>:
  401d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d66:	4606      	mov	r6, r0
  401d68:	460f      	mov	r7, r1
  401d6a:	4614      	mov	r4, r2
  401d6c:	18d5      	adds	r5, r2, r3
  401d6e:	42ac      	cmp	r4, r5
  401d70:	d101      	bne.n	401d76 <__sfputs_r+0x12>
  401d72:	2000      	movs	r0, #0
  401d74:	e007      	b.n	401d86 <__sfputs_r+0x22>
  401d76:	463a      	mov	r2, r7
  401d78:	f814 1b01 	ldrb.w	r1, [r4], #1
  401d7c:	4630      	mov	r0, r6
  401d7e:	f7ff ffdb 	bl	401d38 <__sfputc_r>
  401d82:	1c43      	adds	r3, r0, #1
  401d84:	d1f3      	bne.n	401d6e <__sfputs_r+0xa>
  401d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00401d88 <_vfiprintf_r>:
  401d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d8c:	b09d      	sub	sp, #116	; 0x74
  401d8e:	460c      	mov	r4, r1
  401d90:	4617      	mov	r7, r2
  401d92:	9303      	str	r3, [sp, #12]
  401d94:	4606      	mov	r6, r0
  401d96:	b118      	cbz	r0, 401da0 <_vfiprintf_r+0x18>
  401d98:	6983      	ldr	r3, [r0, #24]
  401d9a:	b90b      	cbnz	r3, 401da0 <_vfiprintf_r+0x18>
  401d9c:	f7ff fe2a 	bl	4019f4 <__sinit>
  401da0:	4b7c      	ldr	r3, [pc, #496]	; (401f94 <_vfiprintf_r+0x20c>)
  401da2:	429c      	cmp	r4, r3
  401da4:	d157      	bne.n	401e56 <_vfiprintf_r+0xce>
  401da6:	6874      	ldr	r4, [r6, #4]
  401da8:	89a3      	ldrh	r3, [r4, #12]
  401daa:	0718      	lsls	r0, r3, #28
  401dac:	d55d      	bpl.n	401e6a <_vfiprintf_r+0xe2>
  401dae:	6923      	ldr	r3, [r4, #16]
  401db0:	2b00      	cmp	r3, #0
  401db2:	d05a      	beq.n	401e6a <_vfiprintf_r+0xe2>
  401db4:	2300      	movs	r3, #0
  401db6:	9309      	str	r3, [sp, #36]	; 0x24
  401db8:	2320      	movs	r3, #32
  401dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  401dbe:	2330      	movs	r3, #48	; 0x30
  401dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  401dc4:	f04f 0b01 	mov.w	fp, #1
  401dc8:	46b8      	mov	r8, r7
  401dca:	4645      	mov	r5, r8
  401dcc:	f815 3b01 	ldrb.w	r3, [r5], #1
  401dd0:	2b00      	cmp	r3, #0
  401dd2:	d155      	bne.n	401e80 <_vfiprintf_r+0xf8>
  401dd4:	ebb8 0a07 	subs.w	sl, r8, r7
  401dd8:	d00b      	beq.n	401df2 <_vfiprintf_r+0x6a>
  401dda:	4653      	mov	r3, sl
  401ddc:	463a      	mov	r2, r7
  401dde:	4621      	mov	r1, r4
  401de0:	4630      	mov	r0, r6
  401de2:	f7ff ffbf 	bl	401d64 <__sfputs_r>
  401de6:	3001      	adds	r0, #1
  401de8:	f000 80c4 	beq.w	401f74 <_vfiprintf_r+0x1ec>
  401dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401dee:	4453      	add	r3, sl
  401df0:	9309      	str	r3, [sp, #36]	; 0x24
  401df2:	f898 3000 	ldrb.w	r3, [r8]
  401df6:	2b00      	cmp	r3, #0
  401df8:	f000 80bc 	beq.w	401f74 <_vfiprintf_r+0x1ec>
  401dfc:	2300      	movs	r3, #0
  401dfe:	f04f 32ff 	mov.w	r2, #4294967295
  401e02:	9304      	str	r3, [sp, #16]
  401e04:	9307      	str	r3, [sp, #28]
  401e06:	9205      	str	r2, [sp, #20]
  401e08:	9306      	str	r3, [sp, #24]
  401e0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  401e0e:	931a      	str	r3, [sp, #104]	; 0x68
  401e10:	2205      	movs	r2, #5
  401e12:	7829      	ldrb	r1, [r5, #0]
  401e14:	4860      	ldr	r0, [pc, #384]	; (401f98 <_vfiprintf_r+0x210>)
  401e16:	f000 fb13 	bl	402440 <memchr>
  401e1a:	f105 0801 	add.w	r8, r5, #1
  401e1e:	9b04      	ldr	r3, [sp, #16]
  401e20:	2800      	cmp	r0, #0
  401e22:	d131      	bne.n	401e88 <_vfiprintf_r+0x100>
  401e24:	06d9      	lsls	r1, r3, #27
  401e26:	bf44      	itt	mi
  401e28:	2220      	movmi	r2, #32
  401e2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  401e2e:	071a      	lsls	r2, r3, #28
  401e30:	bf44      	itt	mi
  401e32:	222b      	movmi	r2, #43	; 0x2b
  401e34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  401e38:	782a      	ldrb	r2, [r5, #0]
  401e3a:	2a2a      	cmp	r2, #42	; 0x2a
  401e3c:	d02c      	beq.n	401e98 <_vfiprintf_r+0x110>
  401e3e:	9a07      	ldr	r2, [sp, #28]
  401e40:	2100      	movs	r1, #0
  401e42:	200a      	movs	r0, #10
  401e44:	46a8      	mov	r8, r5
  401e46:	3501      	adds	r5, #1
  401e48:	f898 3000 	ldrb.w	r3, [r8]
  401e4c:	3b30      	subs	r3, #48	; 0x30
  401e4e:	2b09      	cmp	r3, #9
  401e50:	d96d      	bls.n	401f2e <_vfiprintf_r+0x1a6>
  401e52:	b371      	cbz	r1, 401eb2 <_vfiprintf_r+0x12a>
  401e54:	e026      	b.n	401ea4 <_vfiprintf_r+0x11c>
  401e56:	4b51      	ldr	r3, [pc, #324]	; (401f9c <_vfiprintf_r+0x214>)
  401e58:	429c      	cmp	r4, r3
  401e5a:	d101      	bne.n	401e60 <_vfiprintf_r+0xd8>
  401e5c:	68b4      	ldr	r4, [r6, #8]
  401e5e:	e7a3      	b.n	401da8 <_vfiprintf_r+0x20>
  401e60:	4b4f      	ldr	r3, [pc, #316]	; (401fa0 <_vfiprintf_r+0x218>)
  401e62:	429c      	cmp	r4, r3
  401e64:	bf08      	it	eq
  401e66:	68f4      	ldreq	r4, [r6, #12]
  401e68:	e79e      	b.n	401da8 <_vfiprintf_r+0x20>
  401e6a:	4621      	mov	r1, r4
  401e6c:	4630      	mov	r0, r6
  401e6e:	f7ff fc61 	bl	401734 <__swsetup_r>
  401e72:	2800      	cmp	r0, #0
  401e74:	d09e      	beq.n	401db4 <_vfiprintf_r+0x2c>
  401e76:	f04f 30ff 	mov.w	r0, #4294967295
  401e7a:	b01d      	add	sp, #116	; 0x74
  401e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e80:	2b25      	cmp	r3, #37	; 0x25
  401e82:	d0a7      	beq.n	401dd4 <_vfiprintf_r+0x4c>
  401e84:	46a8      	mov	r8, r5
  401e86:	e7a0      	b.n	401dca <_vfiprintf_r+0x42>
  401e88:	4a43      	ldr	r2, [pc, #268]	; (401f98 <_vfiprintf_r+0x210>)
  401e8a:	1a80      	subs	r0, r0, r2
  401e8c:	fa0b f000 	lsl.w	r0, fp, r0
  401e90:	4318      	orrs	r0, r3
  401e92:	9004      	str	r0, [sp, #16]
  401e94:	4645      	mov	r5, r8
  401e96:	e7bb      	b.n	401e10 <_vfiprintf_r+0x88>
  401e98:	9a03      	ldr	r2, [sp, #12]
  401e9a:	1d11      	adds	r1, r2, #4
  401e9c:	6812      	ldr	r2, [r2, #0]
  401e9e:	9103      	str	r1, [sp, #12]
  401ea0:	2a00      	cmp	r2, #0
  401ea2:	db01      	blt.n	401ea8 <_vfiprintf_r+0x120>
  401ea4:	9207      	str	r2, [sp, #28]
  401ea6:	e004      	b.n	401eb2 <_vfiprintf_r+0x12a>
  401ea8:	4252      	negs	r2, r2
  401eaa:	f043 0302 	orr.w	r3, r3, #2
  401eae:	9207      	str	r2, [sp, #28]
  401eb0:	9304      	str	r3, [sp, #16]
  401eb2:	f898 3000 	ldrb.w	r3, [r8]
  401eb6:	2b2e      	cmp	r3, #46	; 0x2e
  401eb8:	d110      	bne.n	401edc <_vfiprintf_r+0x154>
  401eba:	f898 3001 	ldrb.w	r3, [r8, #1]
  401ebe:	2b2a      	cmp	r3, #42	; 0x2a
  401ec0:	f108 0101 	add.w	r1, r8, #1
  401ec4:	d137      	bne.n	401f36 <_vfiprintf_r+0x1ae>
  401ec6:	9b03      	ldr	r3, [sp, #12]
  401ec8:	1d1a      	adds	r2, r3, #4
  401eca:	681b      	ldr	r3, [r3, #0]
  401ecc:	9203      	str	r2, [sp, #12]
  401ece:	2b00      	cmp	r3, #0
  401ed0:	bfb8      	it	lt
  401ed2:	f04f 33ff 	movlt.w	r3, #4294967295
  401ed6:	f108 0802 	add.w	r8, r8, #2
  401eda:	9305      	str	r3, [sp, #20]
  401edc:	4d31      	ldr	r5, [pc, #196]	; (401fa4 <_vfiprintf_r+0x21c>)
  401ede:	f898 1000 	ldrb.w	r1, [r8]
  401ee2:	2203      	movs	r2, #3
  401ee4:	4628      	mov	r0, r5
  401ee6:	f000 faab 	bl	402440 <memchr>
  401eea:	b140      	cbz	r0, 401efe <_vfiprintf_r+0x176>
  401eec:	2340      	movs	r3, #64	; 0x40
  401eee:	1b40      	subs	r0, r0, r5
  401ef0:	fa03 f000 	lsl.w	r0, r3, r0
  401ef4:	9b04      	ldr	r3, [sp, #16]
  401ef6:	4303      	orrs	r3, r0
  401ef8:	9304      	str	r3, [sp, #16]
  401efa:	f108 0801 	add.w	r8, r8, #1
  401efe:	f898 1000 	ldrb.w	r1, [r8]
  401f02:	4829      	ldr	r0, [pc, #164]	; (401fa8 <_vfiprintf_r+0x220>)
  401f04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  401f08:	2206      	movs	r2, #6
  401f0a:	f108 0701 	add.w	r7, r8, #1
  401f0e:	f000 fa97 	bl	402440 <memchr>
  401f12:	2800      	cmp	r0, #0
  401f14:	d034      	beq.n	401f80 <_vfiprintf_r+0x1f8>
  401f16:	4b25      	ldr	r3, [pc, #148]	; (401fac <_vfiprintf_r+0x224>)
  401f18:	bb03      	cbnz	r3, 401f5c <_vfiprintf_r+0x1d4>
  401f1a:	9b03      	ldr	r3, [sp, #12]
  401f1c:	3307      	adds	r3, #7
  401f1e:	f023 0307 	bic.w	r3, r3, #7
  401f22:	3308      	adds	r3, #8
  401f24:	9303      	str	r3, [sp, #12]
  401f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f28:	444b      	add	r3, r9
  401f2a:	9309      	str	r3, [sp, #36]	; 0x24
  401f2c:	e74c      	b.n	401dc8 <_vfiprintf_r+0x40>
  401f2e:	fb00 3202 	mla	r2, r0, r2, r3
  401f32:	2101      	movs	r1, #1
  401f34:	e786      	b.n	401e44 <_vfiprintf_r+0xbc>
  401f36:	2300      	movs	r3, #0
  401f38:	9305      	str	r3, [sp, #20]
  401f3a:	4618      	mov	r0, r3
  401f3c:	250a      	movs	r5, #10
  401f3e:	4688      	mov	r8, r1
  401f40:	3101      	adds	r1, #1
  401f42:	f898 2000 	ldrb.w	r2, [r8]
  401f46:	3a30      	subs	r2, #48	; 0x30
  401f48:	2a09      	cmp	r2, #9
  401f4a:	d903      	bls.n	401f54 <_vfiprintf_r+0x1cc>
  401f4c:	2b00      	cmp	r3, #0
  401f4e:	d0c5      	beq.n	401edc <_vfiprintf_r+0x154>
  401f50:	9005      	str	r0, [sp, #20]
  401f52:	e7c3      	b.n	401edc <_vfiprintf_r+0x154>
  401f54:	fb05 2000 	mla	r0, r5, r0, r2
  401f58:	2301      	movs	r3, #1
  401f5a:	e7f0      	b.n	401f3e <_vfiprintf_r+0x1b6>
  401f5c:	ab03      	add	r3, sp, #12
  401f5e:	9300      	str	r3, [sp, #0]
  401f60:	4622      	mov	r2, r4
  401f62:	4b13      	ldr	r3, [pc, #76]	; (401fb0 <_vfiprintf_r+0x228>)
  401f64:	a904      	add	r1, sp, #16
  401f66:	4630      	mov	r0, r6
  401f68:	f3af 8000 	nop.w
  401f6c:	f1b0 3fff 	cmp.w	r0, #4294967295
  401f70:	4681      	mov	r9, r0
  401f72:	d1d8      	bne.n	401f26 <_vfiprintf_r+0x19e>
  401f74:	89a3      	ldrh	r3, [r4, #12]
  401f76:	065b      	lsls	r3, r3, #25
  401f78:	f53f af7d 	bmi.w	401e76 <_vfiprintf_r+0xee>
  401f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
  401f7e:	e77c      	b.n	401e7a <_vfiprintf_r+0xf2>
  401f80:	ab03      	add	r3, sp, #12
  401f82:	9300      	str	r3, [sp, #0]
  401f84:	4622      	mov	r2, r4
  401f86:	4b0a      	ldr	r3, [pc, #40]	; (401fb0 <_vfiprintf_r+0x228>)
  401f88:	a904      	add	r1, sp, #16
  401f8a:	4630      	mov	r0, r6
  401f8c:	f000 f888 	bl	4020a0 <_printf_i>
  401f90:	e7ec      	b.n	401f6c <_vfiprintf_r+0x1e4>
  401f92:	bf00      	nop
  401f94:	00402604 	.word	0x00402604
  401f98:	00402644 	.word	0x00402644
  401f9c:	00402624 	.word	0x00402624
  401fa0:	004025e4 	.word	0x004025e4
  401fa4:	0040264a 	.word	0x0040264a
  401fa8:	0040264e 	.word	0x0040264e
  401fac:	00000000 	.word	0x00000000
  401fb0:	00401d65 	.word	0x00401d65

00401fb4 <_printf_common>:
  401fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401fb8:	4691      	mov	r9, r2
  401fba:	461f      	mov	r7, r3
  401fbc:	688a      	ldr	r2, [r1, #8]
  401fbe:	690b      	ldr	r3, [r1, #16]
  401fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  401fc4:	4293      	cmp	r3, r2
  401fc6:	bfb8      	it	lt
  401fc8:	4613      	movlt	r3, r2
  401fca:	f8c9 3000 	str.w	r3, [r9]
  401fce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  401fd2:	4606      	mov	r6, r0
  401fd4:	460c      	mov	r4, r1
  401fd6:	b112      	cbz	r2, 401fde <_printf_common+0x2a>
  401fd8:	3301      	adds	r3, #1
  401fda:	f8c9 3000 	str.w	r3, [r9]
  401fde:	6823      	ldr	r3, [r4, #0]
  401fe0:	0699      	lsls	r1, r3, #26
  401fe2:	bf42      	ittt	mi
  401fe4:	f8d9 3000 	ldrmi.w	r3, [r9]
  401fe8:	3302      	addmi	r3, #2
  401fea:	f8c9 3000 	strmi.w	r3, [r9]
  401fee:	6825      	ldr	r5, [r4, #0]
  401ff0:	f015 0506 	ands.w	r5, r5, #6
  401ff4:	d107      	bne.n	402006 <_printf_common+0x52>
  401ff6:	f104 0a19 	add.w	sl, r4, #25
  401ffa:	68e3      	ldr	r3, [r4, #12]
  401ffc:	f8d9 2000 	ldr.w	r2, [r9]
  402000:	1a9b      	subs	r3, r3, r2
  402002:	429d      	cmp	r5, r3
  402004:	db29      	blt.n	40205a <_printf_common+0xa6>
  402006:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40200a:	6822      	ldr	r2, [r4, #0]
  40200c:	3300      	adds	r3, #0
  40200e:	bf18      	it	ne
  402010:	2301      	movne	r3, #1
  402012:	0692      	lsls	r2, r2, #26
  402014:	d42e      	bmi.n	402074 <_printf_common+0xc0>
  402016:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40201a:	4639      	mov	r1, r7
  40201c:	4630      	mov	r0, r6
  40201e:	47c0      	blx	r8
  402020:	3001      	adds	r0, #1
  402022:	d021      	beq.n	402068 <_printf_common+0xb4>
  402024:	6823      	ldr	r3, [r4, #0]
  402026:	68e5      	ldr	r5, [r4, #12]
  402028:	f8d9 2000 	ldr.w	r2, [r9]
  40202c:	f003 0306 	and.w	r3, r3, #6
  402030:	2b04      	cmp	r3, #4
  402032:	bf08      	it	eq
  402034:	1aad      	subeq	r5, r5, r2
  402036:	68a3      	ldr	r3, [r4, #8]
  402038:	6922      	ldr	r2, [r4, #16]
  40203a:	bf0c      	ite	eq
  40203c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402040:	2500      	movne	r5, #0
  402042:	4293      	cmp	r3, r2
  402044:	bfc4      	itt	gt
  402046:	1a9b      	subgt	r3, r3, r2
  402048:	18ed      	addgt	r5, r5, r3
  40204a:	f04f 0900 	mov.w	r9, #0
  40204e:	341a      	adds	r4, #26
  402050:	454d      	cmp	r5, r9
  402052:	d11b      	bne.n	40208c <_printf_common+0xd8>
  402054:	2000      	movs	r0, #0
  402056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40205a:	2301      	movs	r3, #1
  40205c:	4652      	mov	r2, sl
  40205e:	4639      	mov	r1, r7
  402060:	4630      	mov	r0, r6
  402062:	47c0      	blx	r8
  402064:	3001      	adds	r0, #1
  402066:	d103      	bne.n	402070 <_printf_common+0xbc>
  402068:	f04f 30ff 	mov.w	r0, #4294967295
  40206c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402070:	3501      	adds	r5, #1
  402072:	e7c2      	b.n	401ffa <_printf_common+0x46>
  402074:	18e1      	adds	r1, r4, r3
  402076:	1c5a      	adds	r2, r3, #1
  402078:	2030      	movs	r0, #48	; 0x30
  40207a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40207e:	4422      	add	r2, r4
  402080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402088:	3302      	adds	r3, #2
  40208a:	e7c4      	b.n	402016 <_printf_common+0x62>
  40208c:	2301      	movs	r3, #1
  40208e:	4622      	mov	r2, r4
  402090:	4639      	mov	r1, r7
  402092:	4630      	mov	r0, r6
  402094:	47c0      	blx	r8
  402096:	3001      	adds	r0, #1
  402098:	d0e6      	beq.n	402068 <_printf_common+0xb4>
  40209a:	f109 0901 	add.w	r9, r9, #1
  40209e:	e7d7      	b.n	402050 <_printf_common+0x9c>

004020a0 <_printf_i>:
  4020a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4020a4:	4617      	mov	r7, r2
  4020a6:	7e0a      	ldrb	r2, [r1, #24]
  4020a8:	b085      	sub	sp, #20
  4020aa:	2a6e      	cmp	r2, #110	; 0x6e
  4020ac:	4698      	mov	r8, r3
  4020ae:	4606      	mov	r6, r0
  4020b0:	460c      	mov	r4, r1
  4020b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4020b4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4020b8:	f000 80bc 	beq.w	402234 <_printf_i+0x194>
  4020bc:	d81a      	bhi.n	4020f4 <_printf_i+0x54>
  4020be:	2a63      	cmp	r2, #99	; 0x63
  4020c0:	d02e      	beq.n	402120 <_printf_i+0x80>
  4020c2:	d80a      	bhi.n	4020da <_printf_i+0x3a>
  4020c4:	2a00      	cmp	r2, #0
  4020c6:	f000 80c8 	beq.w	40225a <_printf_i+0x1ba>
  4020ca:	2a58      	cmp	r2, #88	; 0x58
  4020cc:	f000 808a 	beq.w	4021e4 <_printf_i+0x144>
  4020d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4020d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4020d8:	e02a      	b.n	402130 <_printf_i+0x90>
  4020da:	2a64      	cmp	r2, #100	; 0x64
  4020dc:	d001      	beq.n	4020e2 <_printf_i+0x42>
  4020de:	2a69      	cmp	r2, #105	; 0x69
  4020e0:	d1f6      	bne.n	4020d0 <_printf_i+0x30>
  4020e2:	6821      	ldr	r1, [r4, #0]
  4020e4:	681a      	ldr	r2, [r3, #0]
  4020e6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4020ea:	d023      	beq.n	402134 <_printf_i+0x94>
  4020ec:	1d11      	adds	r1, r2, #4
  4020ee:	6019      	str	r1, [r3, #0]
  4020f0:	6813      	ldr	r3, [r2, #0]
  4020f2:	e027      	b.n	402144 <_printf_i+0xa4>
  4020f4:	2a73      	cmp	r2, #115	; 0x73
  4020f6:	f000 80b4 	beq.w	402262 <_printf_i+0x1c2>
  4020fa:	d808      	bhi.n	40210e <_printf_i+0x6e>
  4020fc:	2a6f      	cmp	r2, #111	; 0x6f
  4020fe:	d02a      	beq.n	402156 <_printf_i+0xb6>
  402100:	2a70      	cmp	r2, #112	; 0x70
  402102:	d1e5      	bne.n	4020d0 <_printf_i+0x30>
  402104:	680a      	ldr	r2, [r1, #0]
  402106:	f042 0220 	orr.w	r2, r2, #32
  40210a:	600a      	str	r2, [r1, #0]
  40210c:	e003      	b.n	402116 <_printf_i+0x76>
  40210e:	2a75      	cmp	r2, #117	; 0x75
  402110:	d021      	beq.n	402156 <_printf_i+0xb6>
  402112:	2a78      	cmp	r2, #120	; 0x78
  402114:	d1dc      	bne.n	4020d0 <_printf_i+0x30>
  402116:	2278      	movs	r2, #120	; 0x78
  402118:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  40211c:	496e      	ldr	r1, [pc, #440]	; (4022d8 <_printf_i+0x238>)
  40211e:	e064      	b.n	4021ea <_printf_i+0x14a>
  402120:	681a      	ldr	r2, [r3, #0]
  402122:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402126:	1d11      	adds	r1, r2, #4
  402128:	6019      	str	r1, [r3, #0]
  40212a:	6813      	ldr	r3, [r2, #0]
  40212c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402130:	2301      	movs	r3, #1
  402132:	e0a3      	b.n	40227c <_printf_i+0x1dc>
  402134:	f011 0f40 	tst.w	r1, #64	; 0x40
  402138:	f102 0104 	add.w	r1, r2, #4
  40213c:	6019      	str	r1, [r3, #0]
  40213e:	d0d7      	beq.n	4020f0 <_printf_i+0x50>
  402140:	f9b2 3000 	ldrsh.w	r3, [r2]
  402144:	2b00      	cmp	r3, #0
  402146:	da03      	bge.n	402150 <_printf_i+0xb0>
  402148:	222d      	movs	r2, #45	; 0x2d
  40214a:	425b      	negs	r3, r3
  40214c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402150:	4962      	ldr	r1, [pc, #392]	; (4022dc <_printf_i+0x23c>)
  402152:	220a      	movs	r2, #10
  402154:	e017      	b.n	402186 <_printf_i+0xe6>
  402156:	6820      	ldr	r0, [r4, #0]
  402158:	6819      	ldr	r1, [r3, #0]
  40215a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40215e:	d003      	beq.n	402168 <_printf_i+0xc8>
  402160:	1d08      	adds	r0, r1, #4
  402162:	6018      	str	r0, [r3, #0]
  402164:	680b      	ldr	r3, [r1, #0]
  402166:	e006      	b.n	402176 <_printf_i+0xd6>
  402168:	f010 0f40 	tst.w	r0, #64	; 0x40
  40216c:	f101 0004 	add.w	r0, r1, #4
  402170:	6018      	str	r0, [r3, #0]
  402172:	d0f7      	beq.n	402164 <_printf_i+0xc4>
  402174:	880b      	ldrh	r3, [r1, #0]
  402176:	4959      	ldr	r1, [pc, #356]	; (4022dc <_printf_i+0x23c>)
  402178:	2a6f      	cmp	r2, #111	; 0x6f
  40217a:	bf14      	ite	ne
  40217c:	220a      	movne	r2, #10
  40217e:	2208      	moveq	r2, #8
  402180:	2000      	movs	r0, #0
  402182:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402186:	6865      	ldr	r5, [r4, #4]
  402188:	60a5      	str	r5, [r4, #8]
  40218a:	2d00      	cmp	r5, #0
  40218c:	f2c0 809c 	blt.w	4022c8 <_printf_i+0x228>
  402190:	6820      	ldr	r0, [r4, #0]
  402192:	f020 0004 	bic.w	r0, r0, #4
  402196:	6020      	str	r0, [r4, #0]
  402198:	2b00      	cmp	r3, #0
  40219a:	d13f      	bne.n	40221c <_printf_i+0x17c>
  40219c:	2d00      	cmp	r5, #0
  40219e:	f040 8095 	bne.w	4022cc <_printf_i+0x22c>
  4021a2:	4675      	mov	r5, lr
  4021a4:	2a08      	cmp	r2, #8
  4021a6:	d10b      	bne.n	4021c0 <_printf_i+0x120>
  4021a8:	6823      	ldr	r3, [r4, #0]
  4021aa:	07da      	lsls	r2, r3, #31
  4021ac:	d508      	bpl.n	4021c0 <_printf_i+0x120>
  4021ae:	6923      	ldr	r3, [r4, #16]
  4021b0:	6862      	ldr	r2, [r4, #4]
  4021b2:	429a      	cmp	r2, r3
  4021b4:	bfde      	ittt	le
  4021b6:	2330      	movle	r3, #48	; 0x30
  4021b8:	f805 3c01 	strble.w	r3, [r5, #-1]
  4021bc:	f105 35ff 	addle.w	r5, r5, #4294967295
  4021c0:	ebae 0305 	sub.w	r3, lr, r5
  4021c4:	6123      	str	r3, [r4, #16]
  4021c6:	f8cd 8000 	str.w	r8, [sp]
  4021ca:	463b      	mov	r3, r7
  4021cc:	aa03      	add	r2, sp, #12
  4021ce:	4621      	mov	r1, r4
  4021d0:	4630      	mov	r0, r6
  4021d2:	f7ff feef 	bl	401fb4 <_printf_common>
  4021d6:	3001      	adds	r0, #1
  4021d8:	d155      	bne.n	402286 <_printf_i+0x1e6>
  4021da:	f04f 30ff 	mov.w	r0, #4294967295
  4021de:	b005      	add	sp, #20
  4021e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  4021e8:	493c      	ldr	r1, [pc, #240]	; (4022dc <_printf_i+0x23c>)
  4021ea:	6822      	ldr	r2, [r4, #0]
  4021ec:	6818      	ldr	r0, [r3, #0]
  4021ee:	f012 0f80 	tst.w	r2, #128	; 0x80
  4021f2:	f100 0504 	add.w	r5, r0, #4
  4021f6:	601d      	str	r5, [r3, #0]
  4021f8:	d001      	beq.n	4021fe <_printf_i+0x15e>
  4021fa:	6803      	ldr	r3, [r0, #0]
  4021fc:	e002      	b.n	402204 <_printf_i+0x164>
  4021fe:	0655      	lsls	r5, r2, #25
  402200:	d5fb      	bpl.n	4021fa <_printf_i+0x15a>
  402202:	8803      	ldrh	r3, [r0, #0]
  402204:	07d0      	lsls	r0, r2, #31
  402206:	bf44      	itt	mi
  402208:	f042 0220 	orrmi.w	r2, r2, #32
  40220c:	6022      	strmi	r2, [r4, #0]
  40220e:	b91b      	cbnz	r3, 402218 <_printf_i+0x178>
  402210:	6822      	ldr	r2, [r4, #0]
  402212:	f022 0220 	bic.w	r2, r2, #32
  402216:	6022      	str	r2, [r4, #0]
  402218:	2210      	movs	r2, #16
  40221a:	e7b1      	b.n	402180 <_printf_i+0xe0>
  40221c:	4675      	mov	r5, lr
  40221e:	fbb3 f0f2 	udiv	r0, r3, r2
  402222:	fb02 3310 	mls	r3, r2, r0, r3
  402226:	5ccb      	ldrb	r3, [r1, r3]
  402228:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40222c:	4603      	mov	r3, r0
  40222e:	2800      	cmp	r0, #0
  402230:	d1f5      	bne.n	40221e <_printf_i+0x17e>
  402232:	e7b7      	b.n	4021a4 <_printf_i+0x104>
  402234:	6808      	ldr	r0, [r1, #0]
  402236:	681a      	ldr	r2, [r3, #0]
  402238:	6949      	ldr	r1, [r1, #20]
  40223a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40223e:	d004      	beq.n	40224a <_printf_i+0x1aa>
  402240:	1d10      	adds	r0, r2, #4
  402242:	6018      	str	r0, [r3, #0]
  402244:	6813      	ldr	r3, [r2, #0]
  402246:	6019      	str	r1, [r3, #0]
  402248:	e007      	b.n	40225a <_printf_i+0x1ba>
  40224a:	f010 0f40 	tst.w	r0, #64	; 0x40
  40224e:	f102 0004 	add.w	r0, r2, #4
  402252:	6018      	str	r0, [r3, #0]
  402254:	6813      	ldr	r3, [r2, #0]
  402256:	d0f6      	beq.n	402246 <_printf_i+0x1a6>
  402258:	8019      	strh	r1, [r3, #0]
  40225a:	2300      	movs	r3, #0
  40225c:	6123      	str	r3, [r4, #16]
  40225e:	4675      	mov	r5, lr
  402260:	e7b1      	b.n	4021c6 <_printf_i+0x126>
  402262:	681a      	ldr	r2, [r3, #0]
  402264:	1d11      	adds	r1, r2, #4
  402266:	6019      	str	r1, [r3, #0]
  402268:	6815      	ldr	r5, [r2, #0]
  40226a:	6862      	ldr	r2, [r4, #4]
  40226c:	2100      	movs	r1, #0
  40226e:	4628      	mov	r0, r5
  402270:	f000 f8e6 	bl	402440 <memchr>
  402274:	b108      	cbz	r0, 40227a <_printf_i+0x1da>
  402276:	1b40      	subs	r0, r0, r5
  402278:	6060      	str	r0, [r4, #4]
  40227a:	6863      	ldr	r3, [r4, #4]
  40227c:	6123      	str	r3, [r4, #16]
  40227e:	2300      	movs	r3, #0
  402280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402284:	e79f      	b.n	4021c6 <_printf_i+0x126>
  402286:	6923      	ldr	r3, [r4, #16]
  402288:	462a      	mov	r2, r5
  40228a:	4639      	mov	r1, r7
  40228c:	4630      	mov	r0, r6
  40228e:	47c0      	blx	r8
  402290:	3001      	adds	r0, #1
  402292:	d0a2      	beq.n	4021da <_printf_i+0x13a>
  402294:	6823      	ldr	r3, [r4, #0]
  402296:	079b      	lsls	r3, r3, #30
  402298:	d507      	bpl.n	4022aa <_printf_i+0x20a>
  40229a:	2500      	movs	r5, #0
  40229c:	f104 0919 	add.w	r9, r4, #25
  4022a0:	68e3      	ldr	r3, [r4, #12]
  4022a2:	9a03      	ldr	r2, [sp, #12]
  4022a4:	1a9b      	subs	r3, r3, r2
  4022a6:	429d      	cmp	r5, r3
  4022a8:	db05      	blt.n	4022b6 <_printf_i+0x216>
  4022aa:	68e0      	ldr	r0, [r4, #12]
  4022ac:	9b03      	ldr	r3, [sp, #12]
  4022ae:	4298      	cmp	r0, r3
  4022b0:	bfb8      	it	lt
  4022b2:	4618      	movlt	r0, r3
  4022b4:	e793      	b.n	4021de <_printf_i+0x13e>
  4022b6:	2301      	movs	r3, #1
  4022b8:	464a      	mov	r2, r9
  4022ba:	4639      	mov	r1, r7
  4022bc:	4630      	mov	r0, r6
  4022be:	47c0      	blx	r8
  4022c0:	3001      	adds	r0, #1
  4022c2:	d08a      	beq.n	4021da <_printf_i+0x13a>
  4022c4:	3501      	adds	r5, #1
  4022c6:	e7eb      	b.n	4022a0 <_printf_i+0x200>
  4022c8:	2b00      	cmp	r3, #0
  4022ca:	d1a7      	bne.n	40221c <_printf_i+0x17c>
  4022cc:	780b      	ldrb	r3, [r1, #0]
  4022ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4022d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4022d6:	e765      	b.n	4021a4 <_printf_i+0x104>
  4022d8:	00402666 	.word	0x00402666
  4022dc:	00402655 	.word	0x00402655

004022e0 <_sbrk_r>:
  4022e0:	b538      	push	{r3, r4, r5, lr}
  4022e2:	4c06      	ldr	r4, [pc, #24]	; (4022fc <_sbrk_r+0x1c>)
  4022e4:	2300      	movs	r3, #0
  4022e6:	4605      	mov	r5, r0
  4022e8:	4608      	mov	r0, r1
  4022ea:	6023      	str	r3, [r4, #0]
  4022ec:	f7fe fb5a 	bl	4009a4 <_sbrk>
  4022f0:	1c43      	adds	r3, r0, #1
  4022f2:	d102      	bne.n	4022fa <_sbrk_r+0x1a>
  4022f4:	6823      	ldr	r3, [r4, #0]
  4022f6:	b103      	cbz	r3, 4022fa <_sbrk_r+0x1a>
  4022f8:	602b      	str	r3, [r5, #0]
  4022fa:	bd38      	pop	{r3, r4, r5, pc}
  4022fc:	204002f8 	.word	0x204002f8

00402300 <__sread>:
  402300:	b510      	push	{r4, lr}
  402302:	460c      	mov	r4, r1
  402304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402308:	f000 f8ec 	bl	4024e4 <_read_r>
  40230c:	2800      	cmp	r0, #0
  40230e:	bfab      	itete	ge
  402310:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  402312:	89a3      	ldrhlt	r3, [r4, #12]
  402314:	181b      	addge	r3, r3, r0
  402316:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40231a:	bfac      	ite	ge
  40231c:	6563      	strge	r3, [r4, #84]	; 0x54
  40231e:	81a3      	strhlt	r3, [r4, #12]
  402320:	bd10      	pop	{r4, pc}

00402322 <__swrite>:
  402322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402326:	461f      	mov	r7, r3
  402328:	898b      	ldrh	r3, [r1, #12]
  40232a:	05db      	lsls	r3, r3, #23
  40232c:	4605      	mov	r5, r0
  40232e:	460c      	mov	r4, r1
  402330:	4616      	mov	r6, r2
  402332:	d505      	bpl.n	402340 <__swrite+0x1e>
  402334:	2302      	movs	r3, #2
  402336:	2200      	movs	r2, #0
  402338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40233c:	f000 f868 	bl	402410 <_lseek_r>
  402340:	89a3      	ldrh	r3, [r4, #12]
  402342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40234a:	81a3      	strh	r3, [r4, #12]
  40234c:	4632      	mov	r2, r6
  40234e:	463b      	mov	r3, r7
  402350:	4628      	mov	r0, r5
  402352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402356:	f000 b817 	b.w	402388 <_write_r>

0040235a <__sseek>:
  40235a:	b510      	push	{r4, lr}
  40235c:	460c      	mov	r4, r1
  40235e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402362:	f000 f855 	bl	402410 <_lseek_r>
  402366:	1c43      	adds	r3, r0, #1
  402368:	89a3      	ldrh	r3, [r4, #12]
  40236a:	bf15      	itete	ne
  40236c:	6560      	strne	r0, [r4, #84]	; 0x54
  40236e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402372:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402376:	81a3      	strheq	r3, [r4, #12]
  402378:	bf18      	it	ne
  40237a:	81a3      	strhne	r3, [r4, #12]
  40237c:	bd10      	pop	{r4, pc}

0040237e <__sclose>:
  40237e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402382:	f000 b813 	b.w	4023ac <_close_r>
	...

00402388 <_write_r>:
  402388:	b538      	push	{r3, r4, r5, lr}
  40238a:	4c07      	ldr	r4, [pc, #28]	; (4023a8 <_write_r+0x20>)
  40238c:	4605      	mov	r5, r0
  40238e:	4608      	mov	r0, r1
  402390:	4611      	mov	r1, r2
  402392:	2200      	movs	r2, #0
  402394:	6022      	str	r2, [r4, #0]
  402396:	461a      	mov	r2, r3
  402398:	f7ff f816 	bl	4013c8 <_write>
  40239c:	1c43      	adds	r3, r0, #1
  40239e:	d102      	bne.n	4023a6 <_write_r+0x1e>
  4023a0:	6823      	ldr	r3, [r4, #0]
  4023a2:	b103      	cbz	r3, 4023a6 <_write_r+0x1e>
  4023a4:	602b      	str	r3, [r5, #0]
  4023a6:	bd38      	pop	{r3, r4, r5, pc}
  4023a8:	204002f8 	.word	0x204002f8

004023ac <_close_r>:
  4023ac:	b538      	push	{r3, r4, r5, lr}
  4023ae:	4c06      	ldr	r4, [pc, #24]	; (4023c8 <_close_r+0x1c>)
  4023b0:	2300      	movs	r3, #0
  4023b2:	4605      	mov	r5, r0
  4023b4:	4608      	mov	r0, r1
  4023b6:	6023      	str	r3, [r4, #0]
  4023b8:	f7fe fb06 	bl	4009c8 <_close>
  4023bc:	1c43      	adds	r3, r0, #1
  4023be:	d102      	bne.n	4023c6 <_close_r+0x1a>
  4023c0:	6823      	ldr	r3, [r4, #0]
  4023c2:	b103      	cbz	r3, 4023c6 <_close_r+0x1a>
  4023c4:	602b      	str	r3, [r5, #0]
  4023c6:	bd38      	pop	{r3, r4, r5, pc}
  4023c8:	204002f8 	.word	0x204002f8

004023cc <_fstat_r>:
  4023cc:	b538      	push	{r3, r4, r5, lr}
  4023ce:	4c07      	ldr	r4, [pc, #28]	; (4023ec <_fstat_r+0x20>)
  4023d0:	2300      	movs	r3, #0
  4023d2:	4605      	mov	r5, r0
  4023d4:	4608      	mov	r0, r1
  4023d6:	4611      	mov	r1, r2
  4023d8:	6023      	str	r3, [r4, #0]
  4023da:	f7fe faf8 	bl	4009ce <_fstat>
  4023de:	1c43      	adds	r3, r0, #1
  4023e0:	d102      	bne.n	4023e8 <_fstat_r+0x1c>
  4023e2:	6823      	ldr	r3, [r4, #0]
  4023e4:	b103      	cbz	r3, 4023e8 <_fstat_r+0x1c>
  4023e6:	602b      	str	r3, [r5, #0]
  4023e8:	bd38      	pop	{r3, r4, r5, pc}
  4023ea:	bf00      	nop
  4023ec:	204002f8 	.word	0x204002f8

004023f0 <_isatty_r>:
  4023f0:	b538      	push	{r3, r4, r5, lr}
  4023f2:	4c06      	ldr	r4, [pc, #24]	; (40240c <_isatty_r+0x1c>)
  4023f4:	2300      	movs	r3, #0
  4023f6:	4605      	mov	r5, r0
  4023f8:	4608      	mov	r0, r1
  4023fa:	6023      	str	r3, [r4, #0]
  4023fc:	f7fe faec 	bl	4009d8 <_isatty>
  402400:	1c43      	adds	r3, r0, #1
  402402:	d102      	bne.n	40240a <_isatty_r+0x1a>
  402404:	6823      	ldr	r3, [r4, #0]
  402406:	b103      	cbz	r3, 40240a <_isatty_r+0x1a>
  402408:	602b      	str	r3, [r5, #0]
  40240a:	bd38      	pop	{r3, r4, r5, pc}
  40240c:	204002f8 	.word	0x204002f8

00402410 <_lseek_r>:
  402410:	b538      	push	{r3, r4, r5, lr}
  402412:	4c07      	ldr	r4, [pc, #28]	; (402430 <_lseek_r+0x20>)
  402414:	4605      	mov	r5, r0
  402416:	4608      	mov	r0, r1
  402418:	4611      	mov	r1, r2
  40241a:	2200      	movs	r2, #0
  40241c:	6022      	str	r2, [r4, #0]
  40241e:	461a      	mov	r2, r3
  402420:	f7fe fadc 	bl	4009dc <_lseek>
  402424:	1c43      	adds	r3, r0, #1
  402426:	d102      	bne.n	40242e <_lseek_r+0x1e>
  402428:	6823      	ldr	r3, [r4, #0]
  40242a:	b103      	cbz	r3, 40242e <_lseek_r+0x1e>
  40242c:	602b      	str	r3, [r5, #0]
  40242e:	bd38      	pop	{r3, r4, r5, pc}
  402430:	204002f8 	.word	0x204002f8
	...

00402440 <memchr>:
  402440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402444:	2a10      	cmp	r2, #16
  402446:	db2b      	blt.n	4024a0 <memchr+0x60>
  402448:	f010 0f07 	tst.w	r0, #7
  40244c:	d008      	beq.n	402460 <memchr+0x20>
  40244e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402452:	3a01      	subs	r2, #1
  402454:	428b      	cmp	r3, r1
  402456:	d02d      	beq.n	4024b4 <memchr+0x74>
  402458:	f010 0f07 	tst.w	r0, #7
  40245c:	b342      	cbz	r2, 4024b0 <memchr+0x70>
  40245e:	d1f6      	bne.n	40244e <memchr+0xe>
  402460:	b4f0      	push	{r4, r5, r6, r7}
  402462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40246a:	f022 0407 	bic.w	r4, r2, #7
  40246e:	f07f 0700 	mvns.w	r7, #0
  402472:	2300      	movs	r3, #0
  402474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402478:	3c08      	subs	r4, #8
  40247a:	ea85 0501 	eor.w	r5, r5, r1
  40247e:	ea86 0601 	eor.w	r6, r6, r1
  402482:	fa85 f547 	uadd8	r5, r5, r7
  402486:	faa3 f587 	sel	r5, r3, r7
  40248a:	fa86 f647 	uadd8	r6, r6, r7
  40248e:	faa5 f687 	sel	r6, r5, r7
  402492:	b98e      	cbnz	r6, 4024b8 <memchr+0x78>
  402494:	d1ee      	bne.n	402474 <memchr+0x34>
  402496:	bcf0      	pop	{r4, r5, r6, r7}
  402498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40249c:	f002 0207 	and.w	r2, r2, #7
  4024a0:	b132      	cbz	r2, 4024b0 <memchr+0x70>
  4024a2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4024a6:	3a01      	subs	r2, #1
  4024a8:	ea83 0301 	eor.w	r3, r3, r1
  4024ac:	b113      	cbz	r3, 4024b4 <memchr+0x74>
  4024ae:	d1f8      	bne.n	4024a2 <memchr+0x62>
  4024b0:	2000      	movs	r0, #0
  4024b2:	4770      	bx	lr
  4024b4:	3801      	subs	r0, #1
  4024b6:	4770      	bx	lr
  4024b8:	2d00      	cmp	r5, #0
  4024ba:	bf06      	itte	eq
  4024bc:	4635      	moveq	r5, r6
  4024be:	3803      	subeq	r0, #3
  4024c0:	3807      	subne	r0, #7
  4024c2:	f015 0f01 	tst.w	r5, #1
  4024c6:	d107      	bne.n	4024d8 <memchr+0x98>
  4024c8:	3001      	adds	r0, #1
  4024ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  4024ce:	bf02      	ittt	eq
  4024d0:	3001      	addeq	r0, #1
  4024d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4024d6:	3001      	addeq	r0, #1
  4024d8:	bcf0      	pop	{r4, r5, r6, r7}
  4024da:	3801      	subs	r0, #1
  4024dc:	4770      	bx	lr
  4024de:	bf00      	nop

004024e0 <__malloc_lock>:
  4024e0:	4770      	bx	lr

004024e2 <__malloc_unlock>:
  4024e2:	4770      	bx	lr

004024e4 <_read_r>:
  4024e4:	b538      	push	{r3, r4, r5, lr}
  4024e6:	4c07      	ldr	r4, [pc, #28]	; (402504 <_read_r+0x20>)
  4024e8:	4605      	mov	r5, r0
  4024ea:	4608      	mov	r0, r1
  4024ec:	4611      	mov	r1, r2
  4024ee:	2200      	movs	r2, #0
  4024f0:	6022      	str	r2, [r4, #0]
  4024f2:	461a      	mov	r2, r3
  4024f4:	f7fe ff56 	bl	4013a4 <_read>
  4024f8:	1c43      	adds	r3, r0, #1
  4024fa:	d102      	bne.n	402502 <_read_r+0x1e>
  4024fc:	6823      	ldr	r3, [r4, #0]
  4024fe:	b103      	cbz	r3, 402502 <_read_r+0x1e>
  402500:	602b      	str	r3, [r5, #0]
  402502:	bd38      	pop	{r3, r4, r5, pc}
  402504:	204002f8 	.word	0x204002f8
  402508:	7373654d 	.word	0x7373654d
  40250c:	20656761 	.word	0x20656761
  402510:	65636572 	.word	0x65636572
  402514:	64657669 	.word	0x64657669
  402518:	4e414320 	.word	0x4e414320
  40251c:	25203a30 	.word	0x25203a30
  402520:	64252064 	.word	0x64252064
  402524:	20642520 	.word	0x20642520
  402528:	000a6425 	.word	0x000a6425
  40252c:	7373654d 	.word	0x7373654d
  402530:	20656761 	.word	0x20656761
  402534:	65636572 	.word	0x65636572
  402538:	64657669 	.word	0x64657669
  40253c:	4e414320 	.word	0x4e414320
  402540:	25203a31 	.word	0x25203a31
  402544:	64252064 	.word	0x64252064
  402548:	20642520 	.word	0x20642520
  40254c:	000a6425 	.word	0x000a6425
  402550:	6c6c6548 	.word	0x6c6c6548
  402554:	6f57206f 	.word	0x6f57206f
  402558:	21646c72 	.word	0x21646c72
  40255c:	00000000 	.word	0x00000000
  402560:	682f2e2e 	.word	0x682f2e2e
  402564:	732f6c61 	.word	0x732f6c61
  402568:	682f6372 	.word	0x682f6372
  40256c:	635f6c61 	.word	0x635f6c61
  402570:	615f6e61 	.word	0x615f6e61
  402574:	636e7973 	.word	0x636e7973
  402578:	0000632e 	.word	0x0000632e
  40257c:	682f2e2e 	.word	0x682f2e2e
  402580:	732f6c61 	.word	0x732f6c61
  402584:	682f6372 	.word	0x682f6372
  402588:	695f6c61 	.word	0x695f6c61
  40258c:	00632e6f 	.word	0x00632e6f
  402590:	682f2e2e 	.word	0x682f2e2e
  402594:	732f6c61 	.word	0x732f6c61
  402598:	682f6372 	.word	0x682f6372
  40259c:	755f6c61 	.word	0x755f6c61
  4025a0:	74726173 	.word	0x74726173
  4025a4:	6e79735f 	.word	0x6e79735f
  4025a8:	00632e63 	.word	0x00632e63
  4025ac:	03020100 	.word	0x03020100
  4025b0:	07060504 	.word	0x07060504
  4025b4:	14100c08 	.word	0x14100c08
  4025b8:	40302018 	.word	0x40302018

004025bc <_uarts>:
  4025bc:	00000001 00000800 00000051 682f2e2e     ........Q...../h
  4025cc:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  4025dc:	0000632e                                .c..

004025e0 <_global_impure_ptr>:
  4025e0:	2040002c                                ,.@ 

004025e4 <__sf_fake_stderr>:
	...

00402604 <__sf_fake_stdin>:
	...

00402624 <__sf_fake_stdout>:
	...
  402644:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  402654:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  402664:	31300046 35343332 39383736 64636261     F.0123456789abcd
  402674:	00006665                                ef..

00402678 <_init>:
  402678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40267a:	bf00      	nop
  40267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40267e:	bc08      	pop	{r3}
  402680:	469e      	mov	lr, r3
  402682:	4770      	bx	lr

00402684 <__init_array_start>:
  402684:	0040018d 	.word	0x0040018d

00402688 <_fini>:
  402688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40268a:	bf00      	nop
  40268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40268e:	bc08      	pop	{r3}
  402690:	469e      	mov	lr, r3
  402692:	4770      	bx	lr

00402694 <__fini_array_start>:
  402694:	00400169 	.word	0x00400169
